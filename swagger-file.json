{
    "swagger": "2.0",
    "info": {
        "title": "Virtual Store enterprise web services.",
        "description": "Explore the enterprise web services APIs below. Want to know more? Checkout out our <a href=\"https://github.com/AlgolOrigo/VirtualDesi\">enterprise web services</a> project on GitHub.",
        "version": "0.0.1"
    },
    "host": "virtualstore.herokuapp.com",
    "basePath": "/api-docs",
    "schemes": [
        "https"
    ],
    "paths": {
      "/account-administrator-assignments/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing accountAdministratorAssignment based on its ID.",
                "description": "This service partially updates an existing accountAdministratorAssignment based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of accountAdministratorAssignment that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountAdministratorAssignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/accountAdministratorAssignment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing accountAdministratorAssignment based on its ID.",
                "description": "This service delete an existing accountAdministratorAssignment based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the accountAdministratorAssignment instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/account-administrators/{id}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find an Account Administrator.",
                "description": "This service looks up a Account Administrator.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Account Administrator that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/accountAdministrator"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Account Administrator based on its ID.",
                "description": "This service partially updates an existing Account Administrator based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Account Administrator that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountAdministrator"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/accountAdministrator"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete an existing Account Administrator based on its ID.",
                "description": "This service delete an existing Account Administrator based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account Administrator instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/account-administrators": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch all Account Administrators that meet the query criteria.",
                "description": "This service fetches all Account Administrators that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Account Administrators.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/accountAdministratorList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Account Administrator.",
                "description": "This service creates a new Account Administrator.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountAdministrator"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/account-contact-assignments/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing accountContactAssignment based on its ID.",
                "description": "This service partially updates an existing accountContactAssignment based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of accountContactAssignment that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountContactAssignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/accountContactAssignment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing accountContactAssignment based on its ID.",
                "description": "This service delete an existing accountContactAssignment based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the accountContactAssignment instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/account-partner-assignments/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing accountPartnerAssignment based on its ID.",
                "description": "This service partially updates an existing accountPartnerAssignment based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of accountPartnerAssignment that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountPartnerAssignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/accountPartnerAssignment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing accountPartnerAssignment based on its ID.",
                "description": "This service delete an existing accountPartnerAssignment based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the accountPartnerAssignment instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/account-user-assignments/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing accountUserAssignment based on its ID.",
                "description": "This service partially updates an existing accountUserAssignment based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of accountUserAssignment that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountUserAssignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/accountUserAssignment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing accountUserAssignment based on its ID.",
                "description": "This service delete an existing accountUserAssignment based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the accountUserAssignment instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/compliance-violations/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Compliance Violation based on its ID.",
                "description": "This service partially updates an existing Compliance Violation based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Compliance Violation that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/complianceViolation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/complianceViolation"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing Compliance Violation based on its ID.",
                "description": "This service delete an existing Compliance Violation based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Compliance Violation instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/contacts/{id}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find a Contact.",
                "description": "This service looks up a Contact.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Contact that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/contact"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Contact based on its ID.",
                "description": "This service partially updates an existing Contact based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Contact that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/contact"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete an existing Contact based on its ID.",
                "description": "This service delete an existing Contact based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Contact instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch all Contacts that meet the query criteria.",
                "description": "This service fetches all Contacts that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/contactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Contact.",
                "description": "This service creates a new Contact.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/contact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/countries/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a Country.",
                "description": "This service looks up a Country.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Country that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/country"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Country based on its ID.",
                "description": "This service partially updates an existing Country based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Country that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/country-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/country"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Country based on its ID.",
                "description": "This service delete an existing Country based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Country instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/countries": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Countries that meet the query criteria.",
                "description": "This service fetches all Countries that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Countries.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/countryList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Country.",
                "description": "This service creates a new Country.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/country-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/account-administrator-assignments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find accountAdministratorAssignments associated with a particular Customer Account.",
                "description": "This service looks up accountAdministratorAssignments associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated accountAdministratorAssignments should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of accountAdministratorAssignments.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/assignedAdministratorList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new accountAdministratorAssignment and associate it with the specified customer account.",
                "description": "This service creates a new accountAdministratorAssignment and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the accountAdministratorAssignment that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountAdministratorAssignment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "accountAdministratorAssignment created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/account-contact-assignments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find assigned Contacts associated with a particular Customer Account.",
                "description": "This service looks up assigned Contacts associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Contacts and assignment with account should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Contacts and assignments to an account.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/assignedContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new accountContactAssignment and associate it with the specified customer account.",
                "description": "This service creates a new accountContactAssignment and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the accountContactAssignment that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountContactAssignment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "accountContactAssignment created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/account-partner-assignments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find accountPartnerAssignments associated with a particular Customer Account.",
                "description": "This service looks up accountPartnerAssignments associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated accountPartnerAssignments should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of accountPartnerAssignments.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/assignedPartnerList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new accountPartnerAssignment and associate it with the specified customer account.",
                "description": "This service creates a new accountPartnerAssignment and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the accountPartnerAssignment that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountPartnerAssignment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "accountPartnerAssignment created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/account-user-assignments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find assigned Users associated with a particular Customer Account.",
                "description": "This service looks up assigned Users associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated User and assignment with account should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of User and assignment with account.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/assignedUserList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new accountUserAssignment and associate it with the specified customer account.",
                "description": "This service creates a new accountUserAssignment and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the accountUserAssignment that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/accountUserAssignment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "accountUserAssignment created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/compliance-violations": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Compliance Violations associated with a particular Customer Account.",
                "description": "This service looks up Compliance Violations associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Compliance Violations should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Compliance Violations.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/complianceViolationList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Compliance Violation and associate it with the specified customer account.",
                "description": "This service creates a new Compliance Violation and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Compliance Violation that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/complianceViolation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Compliance Violation created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/email-contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Email Contacts associated with a particular Customer Account.",
                "description": "This service looks up Email Contacts associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Email Contacts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the Email Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/emailContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Email Contact and associate it with the specified customer account.",
                "description": "This service creates a new Email Contact and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Email Contact that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/emailContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Email Contact created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/fax-contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Fax Contacts associated with a particular Customer Account.",
                "description": "This service looks up Fax Contacts associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Fax Contacts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the Fax Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/faxContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Fax Contact and associate it with the specified customer account.",
                "description": "This service creates a new Fax Contact and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Fax Contact that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/faxContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Fax Contact created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/funds-transfer-instruments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Funds Trasnfer PIs associated with a particular Account.",
                "description": "This services looks up Funds Trasnfer PIs associated with a particular Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account for which associated Funds Trasnfer PIs should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Funds Trasnfer PIs.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/fundsTransferPIList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Funds Trasnfer PI and associate it with the specified customer account.",
                "description": "This service creates a new Funds Trasnfer PI and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Funds Trasnfer PI that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "the Funds Trasnfer PI to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fundsTransferPI"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Funds Trasnfer PI created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{acc-id}/loyalty-programs/{prod-id}": {
            "put": {
                "tags": [
                    "Customer"
                ],
                "summary": "Associate an existing Loyalty Program to a particular Account based on its ID.",
                "description": "This service associate an existing Loyalty Program to a particular Account based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "acc-id",
                        "description": "ID of the Account instance that needs to be associated with Loyalty Program.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "prod-id",
                        "description": "ID of the Loyalty Program instance that needs to be associated with account.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance associated with the account."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Disassociate existing Loyalty Program from the particular Account based on its ID.",
                "description": "This service diassociate existing Loyalty Program from the particular Account based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "acc-id",
                        "description": "ID of the Account instance from where Loyalty Program needs to be disassociated.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "prod-id",
                        "description": "ID of the Loyalty Program instance that needs to be disassociated from account.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance disassociated)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/customer-accounts/{id}/loyalty-programs": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Loyalty Programs associated with a particular Account.",
                "description": "This services looks up Loyalty Programs associated with a particular Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account for which associated Loyalty Programs should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Loyalty Programs.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/loyaltyProgramList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/customer-accounts/{id}/payment-card-instruments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Payment Card PIs associated with a particular Account.",
                "description": "This services looks up Payment Card PIs associated with a particular Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account for which associated Payment Card PIs should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Payment Card PIs.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/paymentCardPIList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Payment Card PI and associate it with the specified customer account.",
                "description": "This service creates a new Payment Card PI and associates it with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Payment Card PI that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "the Payment Card PI to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paymentCardPI"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Payment Card PI created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/payment-instruments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Payment Instruments associated with a particular Account.",
                "description": "This services looks up Payment Instruments associated with a particular Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account for which associated Payment Instruments should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Payment Instruments.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/paymentInstrumentList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/customer-accounts/{id}/payment-plans": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Payment Plans associated with a particular Account.",
                "description": "This services looks up Payment Plans associated with a particular Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account for which associated Payment Plans should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Payment Plans.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/paymentPlanList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Payment Plan and associate it with the specified customer account.",
                "description": "This service creates a new Payment Plan and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Payment Plan that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "the Payment Plan to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paymentPlan"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Payment Plan created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/payments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Payments associated with a particular Customer Account.",
                "description": "This service looks up Payments associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Payments should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Payments.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerAccountPayment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/customer-accounts/{id}/phone-contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Phone Contacts associated with a particular Customer Account.",
                "description": "This service looks up Phone Contacts associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Phone Contacts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the Phone Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/phoneContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Phone Contact and associate it with the specified customer account.",
                "description": "This service creates a new Phone Contact and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Phone Contact that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phoneContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Phone Contact created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/postal-contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Postal Contacts associated with a particular Customer Account.",
                "description": "This service looks up Postal Contacts associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Postal Contacts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the Postal Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/postalContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Postal Contact and associate it with the specified customer account.",
                "description": "This service creates a new Postal Contact and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Postal Contact that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postalContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Postal Contact created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/preferences": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Preferences associated with a particular Account.",
                "description": "This services looks up Preferences associated with a particular Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account for which associated Preferences should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Preferences.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerAccountPreferences"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Preference and associate it with the specified customer account.",
                "description": "This service creates a new Preference and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Preference that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/preference"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Preference created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/product-services": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find the Customer Facing Services that realize the Products on a particular Customer Account.",
                "description": "This service looks up Customer Facing Services that realize the Products on a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Customer Facing Services should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Customer Facing Product Services.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerAccountProductServices"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/customer-accounts/{id}/products": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Products associated with a particular Customer Account.",
                "description": "This service looks up Products associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Products should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Products.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerAccountProducts"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/customer-accounts/{id}/tax-exemptions": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Customer Account Tax Exemptions associated with a particular Customer Account.",
                "description": "This service looks up Customer Account Tax Exemptions associated with a particular Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account for which associated Customer Account Tax Exemptions should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Customer Account Tax Exemptions.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerAccountTaxExemptionList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Customer Account Tax Exemption and associate it with the specified customer account.",
                "description": "This service creates a new Customer Account Tax Exemption and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Customer Account Tax Exemption that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customerAccountTaxExemption"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Customer Account Tax Exemptions created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/tokenized-payment-card-instruments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Tokenized Payment Card PIs associated with a particular Account.",
                "description": "This services looks up Tokenized Payment Card PIs associated with a particular Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account for which associated Tokenized Payment Card PIs should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Tokenized Payment Card PIs.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/tokenizedPaymentCardPIList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Tokenized Payment Card PI and associate it with the specified customer account.",
                "description": "This service creates a new Tokenized Payment Card PI and associates it with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Tokenized Payment Card PI that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "the Tokenized Payment Card PI to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tokenizedPaymentCardPI"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tokenized Payment Card PI created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}/tokenized-third-party-instruments": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Tokenized Third Party PIs associated with a particular Account.",
                "description": "This services looks up Tokenized Third Party PIs associated with a particular Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Account for which associated Tokenized Third Party PIs should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Tokenized Third Party PIs.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/tokenizedThirdPartyPIList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Tokenized Third Party PI and associate it with the specified customer account.",
                "description": "This service creates a new Tokenized Third Party PI and associate with a specified customer account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account with which to associate the Tokenized Third Party PI that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "the Tokenized Third Party PI to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tokenizedThirdPartyPI"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tokenized Third Party PI created and associated with Customer Account."
                    },
                    "400": {
                        "description": "Invalid Customer Account ID supplied."
                    },
                    "404": {
                        "description": "Customer Account instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts/{id}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find an Account.",
                "description": "This services looks up a Customer Account.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of instance that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerAccount"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Account based on its ID.",
                "description": "This service partially updates an existing Customer Account based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Documentation that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customerAccount-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/customerAccount"
                        }
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-accounts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch all Accounts that meet the query criteria.",
                "description": "This service fetches all Customer Accounts that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering Accounts.",
                        "required": false,
                        "type": "string",
                        "format": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerAccountList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Account.",
                "description": "This service creates a new Customer Account.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customerAccount-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/customer-billing-cycle-specifications/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Customer Billing Cycle Spec based on its ID.",
                "description": "This service partially updates an existing Customer Billing Cycle Spec based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Customer Billing Cycle Spec that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customerBillingCycleSpec"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/customerBillingCycleSpec"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing Customer Billing Cycle Spec based on its ID.",
                "description": "This service delete an existing Customer Billing Cycle Spec based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Billing Cycle Spec instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/customer-billing-cycle-specifications": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Customer Billing Cycle Specifications that meet the query criteria.",
                "description": "This service looks up Customer Billing Cycle Specifications that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Customer Billing Cycle Specifications.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerBillingCycleSpecList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Customer Billing Cycle Specification.",
                "description": "This service creates a new Customer Billing Cycle Specification.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customerBillingCycleSpec"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/documentation/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a Documentation.",
                "description": "This service looks up a Documentation.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Documentation that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/documentation"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Documentation based on its ID.",
                "description": "This service partially updates an existing Documentation based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Documentation that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/documentation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/documentation"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Documentation based on its ID.",
                "description": "This service delete an existing Documentation based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Documentation instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/documentation": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Documentation that meet the query criteria.",
                "description": "This service fetches all Documentation that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Documentation.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/documentationList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Documentation.",
                "description": "This service creates a new Documentation.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/documentation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/email-contacts/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Email Contact based on its ID.",
                "description": "This service partially updates an existing Email Contact based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Email Contact that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/emailContact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/emailContact"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing Email Contact based on its ID.",
                "description": "This service delete an existing Email Contact based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Email Contact instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/fax-contacts/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Fax Contact based on its ID.",
                "description": "This service partially updates an existing Fax Contact based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Fax Contact that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/faxContact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/faxContact"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing Fax Contact based on its ID.",
                "description": "This service delete an existing Fax Contact based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Fax Contact instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/funds-transfer-instruments/{id}": {
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Funds Trasnfer PI based on its ID.",
                "description": "This service partially updates an existing Funds Trasnfer PI based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Funds Trasnfer PI that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/fundsTransferPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/fundsTransferPI"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete existing Funds Trasnfer PI based on its ID.",
                "description": "This service deletes an existing Funds Trasnfer PI based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Funds Trasnfer PI instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/generic-physical-devices": {
            "get": {
                "tags": [
                    "Resource"
                ],
                "summary": "Fetch all Generic Physical Devices that meet the query criteria.",
                "description": "This service fetches all Generic Physical Devices that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Generic Physical Devices.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/genericPhysicalDeviceList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Resource"
                ],
                "summary": "Create a new Generic Physical Device.",
                "description": "This service creates a new Generic Physical Device.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genericPhysicalDevice-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/loyalty-programs/{id}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Find a Loyalty Program.",
                "description": "This service looks up a Loyalty Program.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Loyalty Program that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/loyaltyProgram"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Product"
                ],
                "summary": "Partially update an existing Loyalty Program based on its ID.",
                "description": "This service partially updates an existing Loyalty Program based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Loyalty Program that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/loyaltyProgram-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/loyaltyProgram"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/loyalty-programs": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Fetch all Loyalty Programs that meet the query criteria.",
                "description": "This service fetches all Loyalty Programs that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Loyalty Programs.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/loyaltyProgramList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Create a new Loyalty Program.",
                "description": "This service creates a new Loyalty Program.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/loyaltyProgram-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/managed-user-credentials/{id}": {
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Managed User Credential based on its ID.",
                "description": "This service partially updates an existing Managed User Credential based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Managed User Credential that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/managedUserCredential"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/managedUserCredential"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete existing Managed User Credential based on its ID.",
                "description": "This service delete an existing Managed User Credential based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Managed User Credential instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/owners/{id}/email-contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Email Contacts associated with a particular Owner.",
                "description": "This service looks up Email Contacts associated with a particular Owner.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner for which associated Email Contacts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the Email Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/emailContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Email Contact and associate it with the specified Owner.",
                "description": "This service creates a new Email Contact and associate with a specified Owner.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner with which to associate the Email Contact that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/emailContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Email Contact created and associated with Owner."
                    },
                    "400": {
                        "description": "Invalid Owner ID supplied."
                    },
                    "404": {
                        "description": "Owner instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/owners/{id}/fax-contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Fax Contacts associated with a particular Owner.",
                "description": "This service looks up Fax Contacts associated with a particular Owner.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner for which associated Fax Contacts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the Fax Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/faxContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Fax Contact and associate it with the specified Owner.",
                "description": "This service creates a new Fax Contact and associate with a specified Owner.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner with which to associate the Fax Contact that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/faxContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Fax Contact created and associated with Owner."
                    },
                    "400": {
                        "description": "Invalid Owner ID supplied."
                    },
                    "404": {
                        "description": "Owner instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/owners/{id}/phone-contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Phone Contacts associated with a particular Owner.",
                "description": "This service looks up Phone Contacts associated with a particular Owner.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner for which associated Phone Contacts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the Phone Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/phoneContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Phone Contact and associate it with the specified Owner.",
                "description": "This service creates a new Phone Contact and associate with a specified Owner.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner with which to associate the Phone Contact that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phoneContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Phone Contact created and associated with Owner."
                    },
                    "400": {
                        "description": "Invalid Owner ID supplied."
                    },
                    "404": {
                        "description": "Owner instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/owners/{id}/postal-contacts": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Postal Contacts associated with a particular Owner.",
                "description": "This service looks up Postal Contacts associated with a particular Owner.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner for which associated Postal Contacts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the Postal Contacts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/postalContactList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Postal Contact and associate it with the specified Owner.",
                "description": "This service creates a new Postal Contact and associate with a specified Owner.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner with which to associate the Postal Contact that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postalContact"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Postal Contact created and associated with Owner."
                    },
                    "400": {
                        "description": "Invalid Owner ID supplied."
                    },
                    "404": {
                        "description": "Owner instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/owners/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find an Owner.",
                "description": "This service looks up an Owner.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Owner that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/owner"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Owner based on its ID.",
                "description": "This service partially updates an existing Owner based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Owner that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/owner"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/owner"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Owner based on its ID.",
                "description": "This service delete an existing Owner based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Owner instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/owners": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Owners that meet the query criteria.",
                "description": "This service fetches all Owners that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Owners.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/ownerList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Owner.",
                "description": "This service creates a new Owner.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/owner"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/partners/{id}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find a Partner.",
                "description": "This service looks up a Partner.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Partner that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/partner"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Partner based on its ID.",
                "description": "This service partially updates an existing Partner based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Partner that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/partner"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/partner"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete an existing Partner based on its ID.",
                "description": "This service delete an existing Partner based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Partner instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/partners": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch all Partners that meet the query criteria.",
                "description": "This service fetches all Partners that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Partners.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/partnerList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Partner.",
                "description": "This service creates a new Partner.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/partner"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/payment-card-instruments/{id}": {
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Payment Card PI based on its ID.",
                "description": "This service partially updates an existing Payment Card PI based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Payment Card PI that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paymentCardPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/paymentCardPI"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete existing Payment Card PI based on its ID.",
                "description": "This service delete an existing Payment Card PI based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Payment Card PI instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/payment-plans/{id}": {
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Payment Plan based on its ID.",
                "description": "This service partially updates an existing Payment Plan based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Payment Plan that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/paymentPlan"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/paymentPlan"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete existing Payment Plan based on its ID.",
                "description": "This service delete an existing Payment Plan based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Payment Plan instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/phone-contacts/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Phone Contact based on its ID.",
                "description": "This service partially updates an existing Phone Contact based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Phone Contact that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/phoneContact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/phoneContact"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing Phone Contact based on its ID.",
                "description": "This service delete an existing Phone Contact based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Phone Contact instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/physical-devices/{id}/customer-accounts": {
            "get": {
                "tags": [
                    "Resource"
                ],
                "summary": "Find Customer Accounts associated with a particular Physical Device.",
                "description": "This services looks up Customer Accounts associated with a particular Physical Device.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Physical Device for which associated Customer Accounts should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Customer Accounts.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/customerAccountList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/physical-devices": {
            "get": {
                "tags": [
                    "Resource"
                ],
                "summary": "Fetch all Physical Devices that meet the query criteria.",
                "description": "This service fetches all Physical Devices that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Physical Device.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/physicalDeviceList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/postal-contacts/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Postal Contact based on its ID.",
                "description": "This service partially updates an existing Postal Contact based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Postal Contact that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/postalContact"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/postalContact"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing Postal Contact based on its ID.",
                "description": "This service delete an existing Postal Contact based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Postal Contact instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/preferences/{id}": {
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Preference based on its ID.",
                "description": "This service partially updates an existing Preference based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Preference that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/preference"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/preference"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete existing Preference based on its ID.",
                "description": "This service delete an existing Preference based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Preference instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/presentations/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find an Presentation.",
                "description": "This service looks up an Presentation.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Presentation that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/presentation"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Presentation based on its ID.",
                "description": "This service partially updates an existing Presentation based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Presentation that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presentation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/presentation"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Presentation based on its ID.",
                "description": "This service delete an existing Presentation based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Presentation instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/presentations": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Presentations that meet the query criteria.",
                "description": "This service fetches all Presentations that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Presentations.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/presentationList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Presentation.",
                "description": "This service creates a new Presentation.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presentation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/product-specifications/{id}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Find a Product Specification.",
                "description": "This service looks up a Product Specification.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Product Specification that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/productSpecification"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Product"
                ],
                "summary": "Partially update an existing Product Specification based on its ID.",
                "description": "This service partially updates an existing Product Specification based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Product Specification that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productSpecification-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/productSpecification"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/product-specifications": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Fetch all Product Specifications that meet the query criteria.",
                "description": "This service fetches all Product Specifications that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Product Specifications.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/productSpecificationList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Create a new Product Specification.",
                "description": "This service creates a new Product Specification.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/productSpecification-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Find a Product.",
                "description": "This service looks up a Product.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Product that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/product"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Product"
                ],
                "summary": "Partially update an existing Product based on its ID.",
                "description": "This service partially updates an existing Product based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Product that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/product-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/product"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/products": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Fetch all Products that meet the query criteria.",
                "description": "This service fetches all Products that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Products.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/productList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Create a new Product.",
                "description": "This service creates a new Product.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/product-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/properties/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a Property.",
                "description": "This service looks up a Property.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Property that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Property based on its ID.",
                "description": "This service partially updates an existing Property based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Property that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/property-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/property"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Property based on its ID.",
                "description": "This service delete an existing Property based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Property instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/properties": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Properties that meet the query criteria.",
                "description": "This service fetches all Properties that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Properties.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/propertyList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Property.",
                "description": "This service creates a new Property.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/property-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/rate-centers/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a Rate Center.",
                "description": "This service looks up a Rate Center.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Rate Center that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/rateCenter"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Rate Center based on its ID.",
                "description": "This service partially updates an existing Rate Center based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Rate Center that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rateCenter-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/rateCenter"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Rate Center based on its ID.",
                "description": "This service delete an existing Rate Center based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Rate Center instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/rate-centers": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Rate Centers that meet the query criteria.",
                "description": "This service fetches all Rate Centers that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Rate Centers.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/rateCenterList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Rate Center.",
                "description": "This service creates a new Rate Center.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rateCenter-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/rate-group-regions/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a Rate Group Region.",
                "description": "This service looks up a Rate Group Region.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Rate Group Region that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/rateGroupRegion"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Rate Group Region based on its ID.",
                "description": "This service partially updates an existing Rate Group Region based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Rate Group Region that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rateGroupRegion-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/rateGroupRegion"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Rate Group Region based on its ID.",
                "description": "This service delete an existing Rate Group Region based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Rate Group Region instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/rate-group-regions": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Rate Group Regions that meet the query criteria.",
                "description": "This service fetches all Rate Group Regions that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Rate Group Regions.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/rateGroupRegionList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Rate Group Region.",
                "description": "This service creates a new Rate Group Region.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rateGroupRegion-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/service-areas": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Service Areas that meet the query criteria.",
                "description": "This service fetches all Service Areas that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Service Areas.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/serviceAreaList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/service-sites/{id}": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Find a Service Site.",
                "description": "This service looks up a Service Site.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Service Site that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/serviceSite"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Service"
                ],
                "summary": "Partially update an existing Service Site based on its ID.",
                "description": "This service partially updates an existing Service Site based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Service Site that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/serviceSite-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/serviceSite"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Service"
                ],
                "summary": "Delete an existing Service Site based on its ID.",
                "description": "This service delete an existing Service Site based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Service Site instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/services/{id}/preferences": {
            "get": {
                "tags": [
                    "Service"
                ],
                "summary": "Find Preferences associated with a particular Service.",
                "description": "This service looks up Preferences associated with a particular Service.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Service for which associated Preferences should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Preferences.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/servicePreferences"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/states/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a State.",
                "description": "This service looks up a State.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of State that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/state"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing State based on its ID.",
                "description": "This service partially updates an existing State based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of State that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/state-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/state"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing State based on its ID.",
                "description": "This service delete an existing State based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the State instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/states": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all States that meet the query criteria.",
                "description": "This service fetches all States that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of States.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/stateList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new State.",
                "description": "This service creates a new State.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/state-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/street-segments/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a Street Segment.",
                "description": "This service looks up a Street Segment.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Street Segment that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/streetSegment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Street Segment based on its ID.",
                "description": "This service partially updates an existing Street Segment based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Street Segment that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/streetSegment-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/streetSegment"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Street Segment based on its ID.",
                "description": "This service delete an existing Street Segment based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Street Segment instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/street-segments": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Street Segments that meet the query criteria.",
                "description": "This service fetches all Street Segments that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Street Segments.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/streetSegmentList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Street Segment.",
                "description": "This service creates a new Street Segment.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/streetSegment-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/tax-exemptions/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing Customer Account Tax Exemption based on its ID.",
                "description": "This service partially updates an existing Customer Account Tax Exemption based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Customer Account Tax Exemption that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customerAccountTaxExemption"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/customerAccountTaxExemption"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing Customer Account Tax Exemption based on its ID.",
                "description": "This service delete an existing Customer Account Tax Exemption based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Customer Account Tax Exemption instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/time-zone-regions/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a Time Zone Region.",
                "description": "This service looks up a Time Zone Region.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Time Zone Region that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/timeZoneRegion"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Time Zone Region based on its ID.",
                "description": "This service partially updates an existing Time Zone Region based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Time Zone Region that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/timeZoneRegion-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/timeZoneRegion"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Time Zone Region based on its ID.",
                "description": "This service delete an existing Time Zone Region based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Time Zone Region instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/time-zone-regions": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Time Zone Regions that meet the query criteria.",
                "description": "This service fetches all Time Zone Regions that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Time Zone Regions.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/timeZoneRegionList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Time Zone Region.",
                "description": "This service creates a new Time Zone Region.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/timeZoneRegion-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/time-zones/{id}": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Find a Time Zone.",
                "description": "This service looks up a Time Zone.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Time Zone that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/timeZone"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "put": {
                "tags": [
                    "Common"
                ],
                "summary": "Update an existing Time Zone based on its ID.",
                "description": "This service updates an existing Time Zone based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Time Zone that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/timeZone"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/timeZone"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete an existing Time Zone based on its ID.",
                "description": "This service delete an existing Time Zone based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Time Zone instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/time-zones": {
            "get": {
                "tags": [
                    "Common"
                ],
                "summary": "Fetch all Time Zones that meet the query criteria.",
                "description": "This service fetches all Time Zones that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Time Zones.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/timeZoneList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Common"
                ],
                "summary": "Create a new Time Zone.",
                "description": "This service creates a new Time Zone.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/timeZone"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/tokenized-payment-card-instruments/{id}": {
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Tokenized Payment Card PI based on its ID.",
                "description": "This service partially updates an existing Tokenized Payment Card PI based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Tokenized Payment Card PI that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tokenizedPaymentCardPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/tokenizedPaymentCardPI"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete existing Tokenized Payment Card PI based on its ID.",
                "description": "This service delete an existing Tokenized Payment Card PI based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Tokenized Payment Card PI instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/tokenized-third-party-instruments/{id}": {
            "patch": {
                "tags": [
                    "Common"
                ],
                "summary": "Partially update an existing Tokenized Third Party PI based on its ID.",
                "description": "This service partially updates an existing Tokenized Third Party PI based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of Tokenized Third Party PI that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/tokenizedThirdPartyPI"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/tokenizedThirdPartyPI"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Common"
                ],
                "summary": "Delete existing Tokenized Third Party PI based on its ID.",
                "description": "This service delete an existing Tokenized Third Party PI based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the Tokenized Third Party PI instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/user-credentials/{id}": {
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing User Credential based on its ID.",
                "description": "This service partially updates an existing User Credential based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of User Credential that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userCredential"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/userCredential"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete existing User Credential based on its ID.",
                "description": "This service delete an existing User Credential based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the User Credential instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/users/{user-id}/entitlements/{entitle-id}": {
            "put": {
                "tags": [
                    "Customer"
                ],
                "summary": "Associate an existing Entitlement to a particular User based on its ID.",
                "description": "This service associate an existing Entitlement to a particular User based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "user-id",
                        "description": "ID of the User instance that needs to be associated with Entitlement.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "entitle-id",
                        "description": "ID of the Entitlement instance that needs to be associated with User.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance associated with the User."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Disassociate existing Entitlement from the particular User based on its ID.",
                "description": "This service diassociate existing Entitlement from the particular User based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "user-id",
                        "description": "ID of the User instance from where Entitlement needs to be disassociated.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "path",
                        "name": "entitle-id",
                        "description": "ID of the Entitlement instance that needs to be disassociated from User.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance disassociated)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/users/{id}/entitlements": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Entitlements associated with a particular User.",
                "description": "This services looks up Entitlements associated with a particular User.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the User for which associated Entitlements should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Entitlements.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/entitlementList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/users/{id}/preferences": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find Preferences associated with a particular User.",
                "description": "This service looks up Preferences associated with a particular User.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the User for which associated Preferences should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Preferences associated with User.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/preferenceList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new Preference and associate it with the specified User.",
                "description": "This service creates a new Preference and associate with a specified User.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the User with which to associate the Preference that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/preference"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Preference created and associated with User."
                    },
                    "400": {
                        "description": "Invalid User ID supplied."
                    },
                    "404": {
                        "description": "User instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/users/{id}/user-credentials": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find User Credentials associated with a particular User.",
                "description": "This service looks up User Credentials associated with a particular User.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the User for which associated User Credentials should be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of User Credentials associated with User.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/userCredentialList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new User Credential and associate it with the specified User.",
                "description": "This service creates a new User Credential and associate with a specified User.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the User with which to associate the User Credential that is created",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userCredential"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Credential created and associated with User."
                    },
                    "400": {
                        "description": "Invalid User ID supplied."
                    },
                    "404": {
                        "description": "User instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Find a User.",
                "description": "This service looks up a User.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of User that needs to be fetched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "patch": {
                "tags": [
                    "Customer"
                ],
                "summary": "Partially update an existing User based on its ID.",
                "description": "This service partially updates an existing User based on its ID.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of User that needs to be patched.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user-create-update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Instance updated.",
                        "schema": {
                            "$ref": "#/definitions/user"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete an existing User based on its ID.",
                "description": "This service delete an existing User based on its ID.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "ID of the User instance that needs to be deleted.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK (instance deleted)."
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Fetch all Users that meet the query criteria.",
                "description": "This service fetches all Users that meet the query criteria.",
                "produces": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Query criteria for filtering the list of Users.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "view",
                        "description": "View of the resource that you want to get.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation.",
                        "schema": {
                            "$ref": "#/definitions/userList"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied."
                    },
                    "404": {
                        "description": "Instance not found."
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a new User.",
                "description": "This service creates a new User.",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user-create-update"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Instance created."
                    },
                    "405": {
                        "description": "Invalid input."
                    }
                }
            }
        }
    },
    "definitions": {
        "accountAdministrator": {
            "title": "accountAdministrator",
            "required": [
                "party"
            ],
            "description": "Represents an Account Administrator.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for account administrator."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the account administrator resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a account administrator in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the account administrator in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the account administrator is valid."
                }
            }
        },
        "accountAdministratorAssignment": {
            "title": "accountAdministratorAssignment",
            "required": [
                "administratorRoleType",
                "accountId",
                "administratorId"
            ],
            "description": "The assignment of an Account Administrator Party Role to a Customer Account.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for accountAdministratorAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountAdministratorAssignment resource."
                },
                "accountId": {
                    "type": "string",
                    "description": "An unique identifier of the account for which administrator is associated with."
                },
                "administratorId": {
                    "type": "string",
                    "description": "An unique identifier of the administrator for an account."
                },
                "administratorRoleType": {
                    "type": "string",
                    "description": "The type of Account Administrator role for this assignment."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the administrator assignment is valid."
                }
            }
        },
        "accountAdministratorList": {
            "title": "accountAdministratorList",
            "description": "This represents a list of accountAdministrator resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountAdministrator list."
                },
                "accountAdministrators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accountAdministrator"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of accountAdministrator."
                }
            }
        },
        "accountBalancePM": {
            "title": "accountBalancePM",
            "required": [
                "objectType"
            ],
            "description": "One method of making a payment, using a credit in the account balance against the billed amount.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "accountBalancePM"
                    ],
                    "description": "The type of the object, accountBalancePM."
                },
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the accountBalancePM."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountBalancePM resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of a particular payment method."
                }
            }
        },
        "accountContactAssignment": {
            "title": "accountContactAssignment",
            "required": [
                "contactRoleType",
                "isPrimary",
                "accountId",
                "contactId"
            ],
            "description": "An individual or organization used as a contact point for a CustomerAccount (i.e. a billing contact) and accessed via some contact medium.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for accountContactAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountContactAssignment resource."
                },
                "accountId": {
                    "type": "string",
                    "description": "An unique identifier of the account for which contact is associated with."
                },
                "contactId": {
                    "type": "string",
                    "description": "An unique identifier of the contact for an account."
                },
                "contactRoleType": {
                    "type": "string",
                    "description": "Identifies the relationship of the contact to the account. The type of contact (e.g., Billing Contact, Signer)."
                },
                "isPrimary": {
                    "type": "boolean",
                    "description": "Indicates if the contact is primary for the account."
                },
                "serviceSites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/serviceSite"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The applicable service sites for this contact."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the contact assignment is valid."
                }
            }
        },
        "accountContactAssignmentList": {
            "title": "accountContactAssignmentList",
            "description": "This represents a collection of accountContactAssignment resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountContactAssignment collection."
                },
                "accountContactAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accountContactAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of accountContactAssignment."
                }
            }
        },
        "accountFinancialSummary": {
            "title": "accountFinancialSummary",
            "required": [
                "accountFinancialStatus",
                "runningBalance"
            ],
            "description": "Information about the financial aspects of the customer account.",
            "type": "object",
            "properties": {
                "accountFinancialStatus": {
                    "type": "string",
                    "enum": [
                        "Current",
                        "Due",
                        "InArrears",
                        "Delinquent"
                    ],
                    "description": "An indication of the financial state of the CustomerAccount, i.e. whether the account is current, due, or undergoing a treatment/dunning activity."
                },
                "runningBalance": {
                    "$ref": "#/definitions/money",
                    "description": "The current running balance on the account, generally calculated from the prior billed amount, current period payments and adjustments, and current period charges and credits."
                },
                "daysInArrears": {
                    "type": "integer",
                    "description": "A calculated value that represents the number of days the account is past the most-recent payment due date (LatestBillSummary.PaymentDueDate)."
                },
                "latestPaymentActivity": {
                    "$ref": "#/definitions/paymentActivity",
                    "description": "Information about the most recent payment received."
                },
                "latestBill": {
                    "$ref": "#/definitions/billSummary",
                    "description": "Information about the latest bill for the account."
                },
                "currentPeriodFinancialActivity": {
                    "$ref": "#/definitions/currentPeriodFinancialActivity",
                    "description": "Current period total charges, credits, payments and adjustments."
                }
            }
        },
        "accountPartnerAssignment": {
            "title": "accountPartnerAssignment",
            "required": [
                "accountId",
                "partnerId"
            ],
            "description": "An assignment of a partner to a customer account.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for accountPartnerAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountPartnerAssignment resource."
                },
                "accountId": {
                    "type": "string",
                    "description": "An unique identifier of the account for which partner is associated with."
                },
                "partnerId": {
                    "type": "string",
                    "description": "An unique identifier of the partner for an account."
                },
                "partnerRole": {
                    "type": "string",
                    "description": "An optional description of the Partner's role. For example, Support, Service Provider, Installer, etc."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the partner assignment is valid."
                },
                "partnerAccountTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/partnerAccountToken"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of partner account token."
                }
            }
        },
        "accountPartnerAssignmentList": {
            "title": "accountPartnerAssignmentList",
            "description": "This represents a collection of accountPartnerAssignment resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountPartnerAssignment collection."
                },
                "accountPartnerAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accountPartnerAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of accountPartnerAssignment."
                }
            }
        },
        "accountUserAssignment": {
            "title": "accountUserAssignment",
            "required": [
                "userRole",
                "userId",
                "accountId"
            ],
            "description": "A summary view of a Customer resource",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "An unique identifier for accountUserAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountUserAssignment resource."
                },
                "accountId": {
                    "type": "string",
                    "description": "An unique identifier of the account for which user is associated with."
                },
                "userId": {
                    "type": "string",
                    "description": "An unique identifier of the user for an account."
                },
                "userRole": {
                    "type": "string",
                    "enum": [
                        "PrimaryOwner",
                        "UnrestrictedSecondary",
                        "RestrictedSecondary",
                        "NonAuthorizedSecondary",
                        "Delegate"
                    ],
                    "description": "The type of assignment for a user on an account. This type defines the priiveleges that the user has in interacting with the account."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the user assignment is valid."
                }
            }
        },
        "accountUserAssignmentList": {
            "title": "accountUserAssignmentList",
            "description": "This represents a collection of accountUserAssignment resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountUserAssignment collection."
                },
                "accountUserAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accountUserAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of accountUserAssignment."
                }
            }
        },
        "allowanceProdPriceAlteration": {
            "title": "allowanceProdPriceAlteration",
            "required": [
                "price",
                "priceClassification"
            ],
            "description": "An allowance (a number of something allowed before charging begins) for a Product.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the allowanceProdPriceAlteration."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this allowanceProdPriceAlteration resource."
                },
                "productPriceName": {
                    "type": "string",
                    "description": "A short decriptive name such as 'affinity discount'."
                },
                "productPriceDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail the semantics of this component."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the price is valid."
                },
                "quantity": {
                    "$ref": "#/definitions/quantity",
                    "description": "Quantity of an interaction item involved in an interaction."
                },
                "price": {
                    "$ref": "#/definitions/money",
                    "description": "The amount of money that characterizes the price."
                },
                "priceClassification": {
                    "type": "string",
                    "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
                },
                "composedOfProdPrices": {
                    "$ref": "#/definitions/productPrices",
                    "description": "Product Prices that this Price may be composed of"
                }
            }
        },
        "alternateIdentification": {
            "title": "alternateIdentification",
            "required": [
                "alternateIdNumber",
                "objectType"
            ],
            "description": "A general form of identification for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "alternateIdentification"
                    ],
                    "description": "The type of the object, alternateIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "alternateIdClassification": {
                    "type": "string",
                    "description": "The classification or type of identification."
                },
                "alternateIdNumber": {
                    "type": "string",
                    "description": "Identification number."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the alternate ID."
                }
            }
        },
        "appliedCustomerBillingAdjustment": {
            "title": "appliedCustomerBillingAdjustment",
            "required": [
                "creationDate",
                "rateAmount",
                "adjustmentDate"
            ],
            "description": "An Adjustment (positive or negative) applied to a Customer Account and generally related to a Customer Bill or a charge on a prior Customer Bill.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the appliedCustomerBillingAdjustment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the appliedCustomerBillingAdjustment resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                },
                "adjustmentDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "An Adjustment date."
                },
                "adjustedAppliedCustomerBillingRate": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/appliedCustomerBillingRate"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingAdjustment"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingAllowance"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingDiscount"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingRebate"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingRefund"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingTaxRate"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerPenaltyCharge"
                        },
                        {
                            "$ref": "#/definitions/compositeAppliedCustomerBillingRate"
                        },
                        {
                            "$ref": "#/definitions/oneTimeAppliedCustomerBillingProductCharge"
                        },
                        {
                            "$ref": "#/definitions/recurringAppliedCustomerBillingProductCharge"
                        }
                    ],
                    "description": "An applied customer billing rate for Adjustment."
                }
            }
        },
        "appliedCustomerBillingAllowance": {
            "title": "appliedCustomerBillingAllowance",
            "required": [
                "creationDate",
                "rateAmount"
            ],
            "description": "An applied amount, usually of money, deducted from the charge for a Product as a discount or in exchange for something. The applied could also be a number of free units, such as minutes, applied to usage.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the appliedCustomerBillingAllowance."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the appliedCustomerBillingAllowance resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                }
            }
        },
        "appliedCustomerBillingDiscount": {
            "title": "appliedCustomerBillingDiscount",
            "required": [
                "creationDate",
                "rateAmount"
            ],
            "description": "A reduction in the price of a Product that is applied to reduce the associated charge.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the appliedCustomerBillingDiscount."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the appliedCustomerBillingDiscount resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                }
            }
        },
        "appliedCustomerBillingRate": {
            "title": "appliedCustomerBillingRate",
            "required": [
                "creationDate",
                "rateAmount"
            ],
            "description": "A charge or a credit assigned to the customers account in the course for the purpose of the billing process.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the appliedCustomerBillingRate."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the appliedCustomerBillingRate resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                }
            }
        },
        "appliedCustomerBillingRebate": {
            "title": "appliedCustomerBillingRebate",
            "required": [
                "creationDate",
                "rateAmount"
            ],
            "description": "An amount, usually of money, which is paid back to a customer's account. E.g. because a customer is entitled to a refund.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the appliedCustomerBillingRebate."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the appliedCustomerBillingRebate resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                }
            }
        },
        "appliedCustomerBillingRefund": {
            "title": "appliedCustomerBillingRefund",
            "required": [
                "creationDate",
                "rateAmount"
            ],
            "description": "An amount, usually of money, which is paid back to a customer's account. E.g. because a customer is entitled to a refund.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the appliedCustomerBillingRefund."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the appliedCustomerBillingRefund resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                },
                "refundType": {
                    "$ref": "#/definitions/refundTypeEnum",
                    "description": "The type of refund."
                }
            }
        },
        "appliedCustomerBillingTaxRate": {
            "title": "appliedCustomerBillingTaxRate",
            "required": [
                "creationDate",
                "rateAmount",
                "taxType",
                "customerTaxId"
            ],
            "description": "An amount of money levied on the price of a Product by a legislative body.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the appliedCustomerBillingTaxRate."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the appliedCustomerBillingTaxRate resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                },
                "taxCategory": {
                    "type": "string",
                    "description": "A categorization of the tax rate."
                },
                "taxType": {
                    "type": "string",
                    "description": "The type for the tax rate."
                },
                "customerTaxId": {
                    "type": "string",
                    "description": "The Tax Id (Tax Number) for the customer for this particular Tax Type."
                },
                "taxedAppliedCustomerBillingRate": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/appliedCustomerBillingRate"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingAdjustment"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingAllowance"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingDiscount"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingRebate"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingRefund"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerBillingTaxRate"
                        },
                        {
                            "$ref": "#/definitions/appliedCustomerPenaltyCharge"
                        },
                        {
                            "$ref": "#/definitions/compositeAppliedCustomerBillingRate"
                        },
                        {
                            "$ref": "#/definitions/oneTimeAppliedCustomerBillingProductCharge"
                        },
                        {
                            "$ref": "#/definitions/recurringAppliedCustomerBillingProductCharge"
                        }
                    ],
                    "description": "An applied customer billing rate taxed to customer."
                }
            }
        },
        "appliedCustomerPenaltyCharge": {
            "title": "appliedCustomerPenaltyCharge",
            "required": [
                "creationDate",
                "rateAmount"
            ],
            "description": "The appliedCustomerPenaltyCharge is a type of AppliedCustomerBillingCharge. It represents penalty charges such as late fees, payment rejection fees, interests, that could be applied, linked to dunning of a due amount, in order to bill the customer according to contractuals terms and conditions.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the appliedCustomerPenaltyCharge."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the appliedCustomerPenaltyCharge resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                }
            }
        },
        "assignedAdministratorList": {
            "title": "assignedAdministratorList",
            "description": "This represents a list of assignedAdministratorProfile resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the assignedAdministratorProfile list."
                },
                "assignedAdministratorProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assignedAdministratorProfile"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of assignedAdministratorProfile."
                }
            }
        },
        "assignedAdministratorProfile": {
            "title": "assignedAdministratorProfile",
            "required": [
                "party"
            ],
            "description": "This is a reperesentation of an accountAdministrator and accountAdministratorAssignment for an account.",
            "type": "object",
            "properties": {
                "accountAdministratorAssignmentId": {
                    "type": "string",
                    "description": "The unique ID of accountAdministratorAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the accountAdministratorAssignment resource."
                },
                "administratorRoleType": {
                    "type": "string",
                    "description": "The type of Account Administrator role for this assignment."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a account administrator in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the account administrator in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the account administrator is valid."
                }
            }
        },
        "assignedContactList": {
            "title": "assignedContactList",
            "description": "This represents a list of assignedContactProfile resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the assignedContact list."
                },
                "assignedContactProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assignedContactProfile"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of assignedContactProfile."
                }
            }
        },
        "assignedContactProfile": {
            "title": "assignedContactProfile",
            "required": [
                "party",
                "contactRoleType",
                "isPrimary"
            ],
            "description": "This is a reperesentation of an contact and accountContactAssignment for an account.",
            "type": "object",
            "properties": {
                "accountContactAssignmentId": {
                    "type": "string",
                    "description": "The unique ID for accountContactAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountContactAssignment resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the contact in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the contact is valid."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the contact."
                },
                "contactRoleType": {
                    "type": "string",
                    "description": "Identifies the relationship of the contact to the account. The type of contact (e.g., Billing Contact, Signer)."
                },
                "isPrimary": {
                    "type": "boolean",
                    "description": "Indicates if the contact is primary for the account."
                },
                "serviceSites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/serviceSite"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The applicable service sites for this contact."
                }
            }
        },
        "assignedPartnerList": {
            "title": "assignedPartnerList",
            "description": "This represents a list of assignedPartnerProfile resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the assignedPartner list."
                },
                "assignedPartnerProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assignedPartnerProfile"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of assignedPartnerProfile."
                }
            }
        },
        "assignedPartnerProfile": {
            "title": "assignedPartnerProfile",
            "required": [
                "party"
            ],
            "description": "Represents a Partner.",
            "type": "object",
            "properties": {
                "accountPartnerAssignmentId": {
                    "type": "string",
                    "description": "The unique ID for accountPartnerAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the accountPartnerAssignment resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the partner in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the partner is valid."
                },
                "partnerRole": {
                    "type": "string",
                    "description": "An optional description of the Partner's role. For example, Support, Service Provider, Installer, etc."
                },
                "partnerAccountTokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/partnerAccountToken"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of partner account token."
                }
            }
        },
        "assignedUserList": {
            "title": "assignedUserList",
            "description": "This represents a list of assignedUserProfile resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the assignedUser list."
                },
                "assignedUserProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assignedUserProfile"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of assignedUserProfile."
                }
            }
        },
        "assignedUserProfile": {
            "title": "assignedUserProfile",
            "required": [
                "party",
                "userRole"
            ],
            "description": "This is a reperesentation of an user and accountUserAssignment for an account.",
            "type": "object",
            "properties": {
                "accountUserAssignmentId": {
                    "type": "string",
                    "description": "The unique ID for accountUserAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the accountUserAssignment resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the user in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the user is valid."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the User"
                },
                "userRole": {
                    "type": "string",
                    "enum": [
                        "PrimaryOwner",
                        "UnrestrictedSecondary",
                        "RestrictedSecondary",
                        "NonAuthorizedSecondary",
                        "Delegate"
                    ],
                    "description": "The type of assignment for a user on an account. This type defines the priiveleges that the user has in interacting with the account."
                },
                "customerAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userAccountAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The collection of a User to a Customer Account assignments."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preference in the context of User."
                },
                "userCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userCredential"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of userCredential for User."
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericPhysicalDevice"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The collection of physical devices associated to User."
                },
                "entitlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entitlement"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of EntitlementToken that authorized the Entitlement of the User."
                }
            }
        },
        "assignmentEntry": {
            "title": "assignmentEntry",
            "required": [
                "assignee"
            ],
            "description": "A single entry into the assignment history of an interaction.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a assignmentEntry."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the assignmentEntry resource."
                },
                "assignedEnd": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date and time for the assignment."
                },
                "assignedStart": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date and time for the assignment."
                },
                "assignee": {
                    "type": "string",
                    "description": "Individual or Group assigned to an Interaction."
                }
            }
        },
        "attributeValuePair": {
            "title": "attributeValuePair",
            "description": "This data type contains an attribute name together with its value",
            "type": "object",
            "properties": {
                "attributeName": {
                    "type": "string",
                    "description": "The name of the attribute."
                },
                "attributeValue": {
                    "type": "string",
                    "description": "The value of the attribute."
                }
            }
        },
        "bankAccountTypeEnum": {
            "title": "bankAccountTypeEnum",
            "description": "An enumeration of bank account types.",
            "type": "string",
            "enum": [
                "Savings",
                "Checking"
            ]
        },
        "bankTransferPM": {
            "title": "bankTransferPM",
            "required": [
                "bankRoutingNumber",
                "bankAccountNumber",
                "objectType"
            ],
            "description": "One method of making a payment, via a Bank Transfer. bankTransferPM is an example of payment method using which payment can be made by EFT.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "bankTransferPM"
                    ],
                    "description": "The type of the object, bankTransferPM."
                },
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the bankTransferPM."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the bankTransferPM resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of a particular payment method."
                },
                "transitNumber": {
                    "type": "string",
                    "description": "transitNumber is used in Canada but not used in US. -- To identify an account in a banking institution in the US, the routingNumber + accountNumber are used. -- To identify an account in a banking institution in Canada, the transitNumber + routingNumber (populated with the institution number) and accountNumber are used."
                },
                "bankRoutingNumber": {
                    "type": "string",
                    "description": "The bank routing number (US) or institution number (Canada) for the payment by EFT."
                },
                "bankAccountNumber": {
                    "type": "string",
                    "description": "The bank account number for the payment by EFT."
                },
                "bankAccountType": {
                    "$ref": "#/definitions/bankAccountTypeEnum",
                    "description": "The type of bank account (savings or checking) for the payment by EFT."
                }
            }
        },
        "billSummary": {
            "title": "billSummary",
            "required": [
                "billedAmount",
                "paymentDueDate",
                "billDate"
            ],
            "description": "Information about a bill.",
            "type": "object",
            "properties": {
                "billedAmount": {
                    "$ref": "#/definitions/money",
                    "description": "The total amount of the bill."
                },
                "paymentDueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the payment for the bill is due."
                },
                "billDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the bill was generated."
                }
            }
        },
        "birthCertificateIdentification": {
            "title": "birthCertificateIdentification",
            "required": [
                "birthCertificateNumber",
                "objectType"
            ],
            "description": "Represents a birth certificate form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "birthCertificateIdentification"
                    ],
                    "description": "The type of the object, birthCertificateIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "birthCertificateNumber": {
                    "type": "string",
                    "description": "Birth Certification Number."
                }
            }
        },
        "businessInteractionRef": {
            "title": "businessInteractionRef",
            "required": [
                "id",
                "link"
            ],
            "description": "This represents a reference to BusinessInteraction object.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a businessInteraction."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to a businessInteraction resource."
                }
            }
        },
        "cardTypeEnum": {
            "title": "cardTypeEnum",
            "description": "Payment Types",
            "type": "string",
            "enum": [
                "Credit",
                "Debit",
                "Gift Card"
            ]
        },
        "cashPM": {
            "title": "cashPM",
            "required": [
                "objectType"
            ],
            "description": "One method of making a payment, via cash. cashPM is an example of payment method, through which payment can be made by cash.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "cashPM"
                    ],
                    "description": "The type of the object, cashPM."
                },
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the cashPM."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the cashPM resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of a particular payment method."
                }
            }
        },
        "checkPM": {
            "title": "checkPM",
            "required": [
                "bankRoutingNumber",
                "bankAccountNumber",
                "checkNumber",
                "objectType"
            ],
            "description": "One method of making a payment, via check (cheque). checkPM is an example of payment method using which payment can be made by check.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "checkPM"
                    ],
                    "description": "The type of the object, checkPM."
                },
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the checkPM."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the checkPM resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of a particular payment method."
                },
                "transitNumber": {
                    "type": "string",
                    "description": "transitNumber is used in Canada but not used in US. -- To identify an account in a banking institution in the US, the routingNumber + accountNumber are used. -- To identify an account in a banking institution in Canada, the transitNumber + routingNumber (populated with the institution number) and accountNumber are used."
                },
                "bankAccountNumber": {
                    "type": "string",
                    "description": "The bank account number for the payment by EFT."
                },
                "bankRoutingNumber": {
                    "type": "string",
                    "description": "The bank routing number (US) or institution number (Canada) for the payment by EFT."
                },
                "checkNumber": {
                    "type": "integer",
                    "description": "The check number of the payment by check."
                }
            }
        },
        "comment": {
            "title": "comment",
            "required": [
                "id",
                "link"
            ],
            "description": "The comment provides detail about the text assigned to business interaction.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for comment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the comment resource."
                },
                "commentText": {
                    "type": "string",
                    "description": "A string describing the detail comment."
                },
                "createTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time that the comment has been created."
                },
                "visibility": {
                    "type": "string",
                    "description": "The visibility of the comment."
                },
                "submitter": {
                    "$ref": "#/definitions/userRef",
                    "description": "A group assigned to a BusinessInteraction. For example, an IncidentTicket assigned to a particular organization (e.g., Network Services)."
                }
            }
        },
        "communicationModeEnum": {
            "title": "communicationModeEnum",
            "description": "The enumeration type of communication for device.",
            "type": "string",
            "enum": [
                "One Way",
                "Two Way",
                "DSG"
            ]
        },
        "companyRegistration": {
            "title": "companyRegistration",
            "required": [
                "companyRegistrationNumber"
            ],
            "description": "Company Registration represents the registration of information used as proof of identity by an Company (Organization).",
            "type": "object",
            "properties": {
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "companyRegistrationNumber": {
                    "type": "string",
                    "description": "Unique identifier for an organization in a given bureau. Ex : DUNS number."
                }
            }
        },
        "complianceViolation": {
            "title": "complianceViolation",
            "required": [
                "id",
                "type"
            ],
            "description": "A ComplianceViolation represents a breach of an acceptable use policy, a lawful compliance policy, DMCA, etc. A ComplianceViolation must be associated to 1 User, 1 Account, or 1 of each.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for complianceViolation."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the complianceViolation resource."
                },
                "type": {
                    "type": "string",
                    "description": "A string describing the exact type of compliance violation."
                },
                "severity": {
                    "type": "integer",
                    "description": "An indication of how severe the ComplianceViolation is. This can be useful to a representative discussing the violation with a Customer, as well as driving the actions of the ComplianceVilationCase."
                },
                "startDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time that the ComplianceViolation occurred."
                },
                "endDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time that the ComplianceViolation was resolved."
                },
                "complianceComments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/comment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The comment provides detail about the text assigned to business interaction."
                }
            }
        },
        "complianceViolationList": {
            "title": "complianceViolationList",
            "description": "This represents a collection of complianceViolation resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the complianceViolation collection."
                },
                "complianceViolations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/complianceViolation"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of complianceViolation."
                }
            }
        },
        "compositeAppliedCustomerBillingRate": {
            "title": "compositeAppliedCustomerBillingRate",
            "required": [
                "creationDate",
                "rateAmount",
                "compositeAppliedCustomerBillingRate"
            ],
            "description": "A composite charge or a credit assigned to the customers account in the course for the purpose of the billing process.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the compositeAppliedCustomerBillingRate."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the compositeAppliedCustomerBillingRate resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                },
                "compositeAppliedCustomerBillingRate": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingAdjustment"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingAllowance"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingDiscount"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRebate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRefund"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingTaxRate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerPenaltyCharge"
                            },
                            {
                                "$ref": "#/definitions/compositeAppliedCustomerBillingRate"
                            },
                            {
                                "$ref": "#/definitions/oneTimeAppliedCustomerBillingProductCharge"
                            },
                            {
                                "$ref": "#/definitions/recurringAppliedCustomerBillingProductCharge"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Composite applied customer billing rate."
                }
            }
        },
        "contact": {
            "title": "contact",
            "required": [
                "party"
            ],
            "description": "Represents a Contact.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for Contact."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Contact resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the contact in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the contact is valid."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the contact."
                }
            }
        },
        "contactList": {
            "title": "contactList",
            "description": "This represents a list of contact resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the contact list."
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contact"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of contact."
                }
            }
        },
        "contactMediumCollection": {
            "title": "contactMediumCollection",
            "description": "A collection of contact resources",
            "type": "object",
            "properties": {
                "contacts": {
                    "type": "array",
                    "description": "Contact mediums for a Party Role.",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            }
        },
        "contractorIdentification": {
            "title": "contractorIdentification",
            "required": [
                "contractorNumber",
                "objectType"
            ],
            "description": "Represents a contractor id form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "contractorIdentification"
                    ],
                    "description": "The type of the object, contractorIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "contractorNumber": {
                    "type": "string",
                    "description": "The contractor identification number."
                }
            }
        },
        "country-create-update": {
            "title": "country-create-update",
            "required": [
                "name"
            ],
            "description": "A Country is a concrete Geographic Location entity that identifies a nation.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for country."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this country resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "name": {
                    "type": "string",
                    "description": "The name that the Country is known by."
                },
                "iso2Code": {
                    "type": "string",
                    "description": "ISO 2 letter Country abbreviation."
                },
                "iso3Code": {
                    "type": "string",
                    "description": "ISO 3 letter Country abbreviation."
                },
                "type": {
                    "type": "string",
                    "description": "The type of Country."
                }
            }
        },
        "country": {
            "title": "country",
            "required": [
                "name",
                "objectType"
            ],
            "description": "A Country is a concrete Geographic Location entity that identifies a nation.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "country"
                    ],
                    "description": "The type of the object, country."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for country."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this country resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "name": {
                    "type": "string",
                    "description": "The name that the Country is known by."
                },
                "iso2Code": {
                    "type": "string",
                    "description": "ISO 2 letter Country abbreviation."
                },
                "iso3Code": {
                    "type": "string",
                    "description": "ISO 3 letter Country abbreviation."
                },
                "type": {
                    "type": "string",
                    "description": "The type of Country."
                }
            }
        },
        "countryList": {
            "title": "countryList",
            "description": "This represents a list of country resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the country list."
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/country"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of country."
                }
            }
        },
        "credentialUsageEnum": {
            "title": "credentialUsageEnum",
            "description": "Specifies whether or not the credential is shared",
            "type": "string",
            "enum": [
                "Individual - Single User",
                "Shared - Multiple Users"
            ]
        },
        "currentPeriodFinancialActivity": {
            "title": "currentPeriodFinancialActivity",
            "description": "Information about the current (unbilled) financial activity for an account.",
            "type": "object",
            "properties": {
                "currentPeriodChargesTotal": {
                    "$ref": "#/definitions/money",
                    "description": "Total of charges incurred since most recent bill date (eg: Video On Demand views)."
                },
                "currentPeriodCreditsTotal": {
                    "$ref": "#/definitions/money",
                    "description": "Total of credits granted to an account since the most recent bill date."
                },
                "currentPeriodPaymentsTotal": {
                    "$ref": "#/definitions/money",
                    "description": "The sum of payments made against an Account since the most recent bill date."
                },
                "currentPeriodAdjustmentsTotal": {
                    "$ref": "#/definitions/money",
                    "description": "The sum of adjustments applied to an Account since the most recent bill date."
                }
            }
        },
        "customer": {
            "title": "customer",
            "required": [
                "id",
                "party",
                "customerSegmentName"
            ],
            "description": "Represents a Contact.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for customer."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customer resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a customer in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the customer in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the customer is valid."
                },
                "customerRank": {
                    "type": "string",
                    "description": "Degree of importance relative to other customers."
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive"
                    ],
                    "description": "The current condition of a customer, such as active or inactive."
                },
                "customerSegmentName": {
                    "type": "string",
                    "description": "The name of the CustomerSegment (e.g. Carrier, Strategic, Core)."
                },
                "description": {
                    "type": "string",
                    "description": "A description of the CustomerSegment."
                }
            }
        },
        "customerAccount-create-update": {
            "title": "customerAccount-create-update",
            "required": [
                "accountNumber",
                "customers"
            ],
            "description": "A A representation of a Customer Account. This schema is used only for creating and updating a Customer Account.",
            "type": "object",
            "properties": {
                "accountNumber": {
                    "type": "string",
                    "description": "The account number for the customer account. The account number is often unique, but is not required to be."
                },
                "accountName": {
                    "type": "string",
                    "description": "A unique identifier for the Customer Account that is known by the account holder."
                },
                "status": {
                    "$ref": "#/definitions/customerAccountStatusEnum",
                    "description": "An indication of the state of the CustomerAccount, E.g. Active, Suspended, etc."
                },
                "creditLimit": {
                    "$ref": "#/definitions/money",
                    "description": "The maximum amount of money that may be charged on an account."
                },
                "pin": {
                    "type": "string",
                    "description": "A multidigit personal identification numbe that is used by a Customer to gain access to a CustomerAccount at an ATM, a computer, or a telephone system, and so forth."
                },
                "billingSystemId": {
                    "type": "string",
                    "description": "A reference to the billing system instance that manages the account."
                },
                "accountClassification": {
                    "type": "string",
                    "description": "A classification (type) of an account, such as individual, joint, business and so forth, whose instances share some of the same characteristics."
                },
                "accountCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of Categories that describe this Account such as hospital, hotel, apartment, and so forth."
                },
                "extendedProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/extendedProperty"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Extended or custom characteristics for a customer account."
                },
                "customers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "References to the Customer(s) associated with the Account."
                },
                "customerBillingCycleSpec": {
                    "$ref": "#/definitions/customerBillingCycleSpecRef",
                    "description": "Reference to the Customer Billing Cycle Specification associated with the account."
                }
            }
        },
        "customerAccount": {
            "title": "customerAccount",
            "description": "A full representation / view of an Account Resource.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The Account's unique identifier."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this Account resource."
                },
                "accountNumber": {
                    "type": "string",
                    "description": "The account number for the customer account. The account number is often unique, but is not required to be."
                },
                "accountName": {
                    "type": "string",
                    "description": "A unique identifier for the Customer Account that is known by the account holder."
                },
                "status": {
                    "$ref": "#/definitions/customerAccountStatusEnum",
                    "description": "An indication of the state of the CustomerAccount, E.g. Active, Suspended, etc."
                },
                "creditLimit": {
                    "$ref": "#/definitions/money",
                    "description": "The maximum amount of money that may be charged on an account."
                },
                "pin": {
                    "type": "string",
                    "description": "A multidigit personal identification numbe that is used by a Customer to gain access to a CustomerAccount at an ATM, a computer, or a telephone system, and so forth."
                },
                "billingSystemId": {
                    "type": "string",
                    "description": "A reference to the billing system instance that manages the account."
                },
                "accountClassification": {
                    "type": "string",
                    "description": "A classification (type) of an account, such as individual, joint, business and so forth, whose instances share some of the same characteristics."
                },
                "accountCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of Categories that describe this Account such as hospital, hotel, apartment, and so forth."
                },
                "accountFinancialSummary": {
                    "$ref": "#/definitions/accountFinancialSummary",
                    "description": "Information about the financial aspects of the customer account."
                },
                "extendedProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/extendedProperty"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Extended or custom characteristics for a customer account."
                },
                "customers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerProfile"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Information about the Customer(s) associated with the Account."
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accountUserAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Information about the User(s) associated with the Account."
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accountContactAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Authorized Contacts for this Customer Account."
                },
                "administrators": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accountAdministratorAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Authorized Administrators of this Customer Account."
                },
                "serviceSites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/serviceSite"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Locations where this Customer Account has Service."
                },
                "customerBillingCycleSpec": {
                    "$ref": "#/definitions/customerBillingCycleSpec",
                    "description": "Information about the billing cycle for this Customer Account."
                },
                "paymentInstruments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/paymentInstrument"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Stored Payment Intruments that may be used to pay bills on this Customer Account."
                },
                "paymentPlans": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/paymentPlan"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Payment Plans that may be used for time-based payments against bills on this Customer Account."
                },
                "customerAccountTaxExemptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerAccountTaxExemption"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Tax Exemptions that may apply to this Customer Account. Each customerAccount may be exempted from taxes via one or more customerAccountTaxExemption."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Preferences that a Customer Account may have in place."
                },
                "complianceViolations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/complianceViolation"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Information about how a Customer Account may be out of Compliance."
                },
                "products": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/productSummary"
                            },
                            {
                                "$ref": "#/definitions/loyaltyProgramSummary"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Summary of the products associated to this Customer Account."
                },
                "partners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/accountPartnerAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Authorized Partners for this Customer Account."
                }
            }
        },
        "customerAccountBills": {
            "title": "customerAccountBills",
            "required": [
                "customerAccountProperties"
            ],
            "description": "The collection of customer Bills associated with an account.",
            "type": "object",
            "properties": {
                "customerAccountProperties": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource"
                },
                "customerBills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerBill"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of customerBill."
                }
            }
        },
        "customerAccountCustomerOrders": {
            "title": "customerAccountCustomerOrders",
            "required": [
                "customerAccountProperties"
            ],
            "description": "The collection of Customer Orders associated with an account.",
            "type": "object",
            "properties": {
                "customerAccountProperties": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource"
                },
                "customerOrders": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/customerOrder"
                            },
                            {
                                "$ref": "#/definitions/localServiceRequest"
                            },
                            {
                                "$ref": "#/definitions/productOrder"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of customerOrders."
                }
            }
        },
        "customerAccountDevices": {
            "title": "customerAccountDevices",
            "required": [
                "customerAccountProperties"
            ],
            "description": "The collection of Devices associated with an account.",
            "type": "object",
            "properties": {
                "customerAccountProperties": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource"
                },
                "physicalDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericPhysicalDevice"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of PhysicalDevice."
                }
            }
        },
        "customerAccountFinancialEventSummary": {
            "title": "customerAccountFinancialEventSummary",
            "required": [
                "customerAccountProperties"
            ],
            "description": "The financial summary associated with a Customer Account.",
            "type": "object",
            "properties": {
                "customerAccountProperties": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource"
                },
                "bills": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerBillSummary"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of summary of Bills associated to a customer account."
                },
                "payments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerPaymentSummary"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of summary of Bills associated to a customer account."
                },
                "charges": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingAdjustment"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingAllowance"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingDiscount"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRebate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRefund"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingTaxRate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerPenaltyCharge"
                            },
                            {
                                "$ref": "#/definitions/compositeAppliedCustomerBillingRate"
                            },
                            {
                                "$ref": "#/definitions/oneTimeAppliedCustomerBillingProductCharge"
                            },
                            {
                                "$ref": "#/definitions/recurringAppliedCustomerBillingProductCharge"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A charge or a credit assigned to the customers account in the course or for the purpose of the billing process."
                }
            }
        },
        "customerAccountFinancialSummary": {
            "title": "customerAccountFinancialSummary",
            "required": [
                "customerAccountProperties",
                "customerAccountFinancialProperties"
            ],
            "description": "The financial summary associated with a Customer Account.",
            "type": "object",
            "properties": {
                "customerAccountProperties": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource"
                },
                "customerAccountFinancialProperties": {
                    "$ref": "#/definitions/accountFinancialSummary",
                    "description": "Provides overall status/snapshot of customer account standing, in 3 sub-groups: overall financial status summary; prior period amount billed and due date; and current period charges, credits, payments and adjustments."
                }
            }
        },
        "customerAccountList": {
            "title": "customerAccountList",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the collection."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerAccount"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array for Accounts."
                }
            }
        },
        "customerAccountPayment": {
            "title": "customerAccountPayment",
            "required": [
                "customerAccountProperties",
                "customerPayment"
            ],
            "description": "The Payment associated with a Customer Account.",
            "type": "object",
            "properties": {
                "customerAccountProperties": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource"
                },
                "customerPayment": {
                    "$ref": "#/definitions/customerPayment",
                    "description": "The payment made against the balance on the customer account."
                },
                "paymentInstruments": {
                    "$ref": "#/definitions/paymentInstrument",
                    "description": "An instrument used for making a payment on customer account balance."
                }
            }
        },
        "customerAccountPreferences": {
            "title": "customerAccountPreferences",
            "required": [
                "customerAccountProperties"
            ],
            "description": "The collection of Preferences associated with a Customer Account.",
            "type": "object",
            "properties": {
                "customerAccountProperties": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Preferences associated with a Customer Account."
                }
            }
        },
        "customerAccountProductServices": {
            "title": "customerAccountProductServices",
            "description": "The collection of product services associated with an account.",
            "required": [
                "accountProductServices"
            ],
            "type": "object",
            "properties": {
                "customerAccountSummary": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource"
                },
                "accountProductServices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productServices",
                        "description": "the product services associated with the account"
                    }
                }
            }
        },
        "customerAccountProducts": {
            "title": "customerAccountProducts",
            "required": [
                "customerAccountProperties"
            ],
            "description": "The collection of Products associated with an Account.",
            "type": "object",
            "properties": {
                "customerAccountProperties": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "summary properties for a Customer Account resource"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/product"
                            },
                            {
                                "$ref": "#/definitions/loyaltyProgram"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Products."
                }
            }
        },
        "customerAccountRef": {
            "title": "customerAccountRef",
            "required": [
                "id",
                "link"
            ],
            "description": "This represents Customer Account ref object.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a customerAccount."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to a CustomerAccount resource."
                }
            }
        },
        "customerAccountStatusEnum": {
            "title": "customerAccountStatusEnum",
            "description": "The status of a customer Account",
            "type": "string",
            "enum": [
                "Active",
                "Suspended",
                "Inactive",
                "Closed",
                "Pending"
            ]
        },
        "customerAccountSummary": {
            "title": "customerAccountSummary",
            "required": [
                "accountCategories"
            ],
            "description": "An entity that defines the summary properties of a CustomerAccount.",
            "type": "object",
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "A unique identifier for a customer account (system identifier)."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the full Customer Account resource"
                },
                "accountNumber": {
                    "type": "string",
                    "description": "The account number for the customer account. The account number is often unique, but is not required to be."
                },
                "accountName": {
                    "type": "string",
                    "description": "A unique identifier for the Customer Account that is known by the account holder."
                },
                "status": {
                    "$ref": "#/definitions/customerAccountStatusEnum",
                    "description": "An indication of the state of the CustomerAccount, E.g. Active, Suspended, etc."
                },
                "creditLimit": {
                    "$ref": "#/definitions/money",
                    "description": "The maximum amount of money that may be charged on an account."
                },
                "pin": {
                    "type": "string",
                    "description": "A multidigit personal identification number that is used by a Customer to gain access to a CustomerAccount at an ATM, a computer, or a telephone system, and so forth."
                },
                "billingSystemId": {
                    "type": "string",
                    "description": "A reference to the billing system instance that manages the account."
                },
                "accountClassification": {
                    "type": "string",
                    "description": "A classification (type) of an account, such as individual, joint, business and so forth, whose instances share some of the same characteristics."
                },
                "accountCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of Categories that describe this Account such as hospital, hotel, apartment, and so forth."
                }
            }
        },
        "customerAccountTaxExemption": {
            "title": "customerAccountTaxExemption",
            "required": [
                "issuingJurisdiction",
                "certificateNumber"
            ],
            "description": "Proof of freedom from taxes imposed by a taxing jurisdiction.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for customerAccountTaxExemption."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customerAccountTaxExemption resource."
                },
                "taxExemptionCategory": {
                    "type": "string",
                    "enum": [
                        "First Nation On Reserve",
                        "First Nation Off Reserrve",
                        "Consulate",
                        "State Provincial Government",
                        "Local Government",
                        "Federal Governmant",
                        "Reseller"
                    ],
                    "description": "An (optional) indication of the category of tax exemption (e.g. reseller)."
                },
                "taxExemptionType": {
                    "type": "string",
                    "description": "An indication of the specific tax type that is exempted. No tax type would indicate exemption fro all taxes for the issuing jurisdiction."
                },
                "issuingJurisdiction": {
                    "type": "string",
                    "description": "The name of the taxing jurisdiction for which taxes are exempt."
                },
                "certificateNumber": {
                    "type": "string",
                    "description": "The identifier of a document that shows proof of exemption from taxes for the taxing jurisdiction."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time duration in which customerAccountTaxExemption is valid."
                }
            }
        },
        "customerAccountTaxExemptionList": {
            "title": "customerAccountTaxExemptionList",
            "description": "This represents a collection of customerAccountTaxExemption resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customerAccountTaxExemption collection."
                },
                "customerAccountTaxExemptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerAccountTaxExemption"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of customerAccountTaxExemption."
                }
            }
        },
        "customerBill": {
            "title": "customerBill",
            "required": [
                "billno",
                "billAmount",
                "billDate"
            ],
            "description": "A total amount due from a CustomerAccount for all products during the billing period.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unambiguously distinguishes different object instances. It is the naming attribute of the object."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customerBill resource."
                },
                "billno": {
                    "type": "string",
                    "description": "A unique identification number of a bill."
                },
                "billAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A total customer bill amount due."
                },
                "billDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date when customer bill is generated."
                },
                "chargeDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date through which charges previously received by the billing system appear on the bill."
                },
                "creditDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date through which credits previously received by the billing system appear on the bill."
                },
                "mailingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A customer bill mailing date."
                },
                "paymentDueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A customer bill payment due date."
                },
                "document": {
                    "$ref": "#/definitions/document",
                    "description": "A reference to physical document such as a contract or email."
                },
                "paymentItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/paymentItem"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "PaymentItem is the application of CustomerPayment. PaymentItem is applied to CustomerBillInvoice AppliedCustomerBillingRate."
                },
                "charges": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingAdjustment"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingAllowance"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingDiscount"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRebate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingRefund"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerBillingTaxRate"
                            },
                            {
                                "$ref": "#/definitions/appliedCustomerPenaltyCharge"
                            },
                            {
                                "$ref": "#/definitions/compositeAppliedCustomerBillingRate"
                            },
                            {
                                "$ref": "#/definitions/oneTimeAppliedCustomerBillingProductCharge"
                            },
                            {
                                "$ref": "#/definitions/recurringAppliedCustomerBillingProductCharge"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A charge or a credit assigned to the customers account in the course or for the purpose of the billing process."
                }
            }
        },
        "customerBillSummary": {
            "title": "customerBillSummary",
            "required": [
                "billno",
                "billAmount",
                "billDate"
            ],
            "description": "A summary of total amount due from a CustomerAccount for all products during the billing period.",
            "type": "object",
            "properties": {
                "billno": {
                    "type": "string",
                    "description": "A unique identification number of a bill."
                },
                "billAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A total customer bill amount due."
                },
                "billDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date when customer bill is generated."
                },
                "chargeDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date through which charges previously received by the billing system appear on the bill."
                },
                "creditDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date through which credits previously received by the billing system appear on the bill."
                },
                "mailingDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A customer bill mailing date."
                },
                "paymentDueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A customer bill payment due date."
                }
            }
        },
        "customerBillingCycleSpec": {
            "title": "customerBillingCycleSpec",
            "required": [
                "billingPeriodType"
            ],
            "description": "A detailed description of when to initiate a billing cycle and the various sub steps of a billing cycle.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for a customerBillingCycleSpec."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customerBillingCycleSpec resource."
                },
                "customerBillCycleSpecName": {
                    "type": "string",
                    "description": "A short descriptive name."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail the semantics of this component."
                },
                "billingDateShift": {
                    "type": "integer",
                    "description": "An offset of a billing date. The offset is expressed as number of days with regard to the start of the BillingPeriod. For example, if the BillingPeriod is monthly, a value of 5 would mean that this cycle runs the 5th through the 4th of the next month."
                },
                "chargeDateOffset": {
                    "type": "integer",
                    "description": "An offset of a date through which charges previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
                },
                "creditDateOffset": {
                    "type": "integer",
                    "description": "An offset of a date through which credits previously received by the billing system will appear on the bill. The offset is expressed as number of days with regard to the start of the BillingPeriod."
                },
                "mailingDateOffset": {
                    "type": "integer",
                    "description": "An offset of a customer bill mailing date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
                },
                "paymentDueDateOffset": {
                    "type": "integer",
                    "description": "An offset of a payment due date. The offset is expressed as number of days with regard to the start of the BillingPeriod."
                },
                "billingPeriodType": {
                    "type": "string",
                    "enum": [
                        "Weekly",
                        "Monthly",
                        "Quarterly",
                        "Annually",
                        "OnDemand",
                        "Custom"
                    ],
                    "description": "A billing time period. It can be recurring (for example, a week, a month, a quarter of year, a year) or custom (in this case additional business entities to describe custom dates would be needed)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the CustomerBillingCycleSpecification is valid."
                }
            }
        },
        "customerBillingCycleSpecList": {
            "title": "customerBillingCycleSpecList",
            "description": "This represents a collection of Customer Billing Cycle Specifications resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Customer Billing Cycle Specification collection."
                },
                "customerBillingCycleSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerBillingCycleSpec"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Customer Billing Cycle Specifications."
                }
            }
        },
        "customerBillingCycleSpecRef": {
            "title": "customerBillingCycleSpecRef",
            "required": [
                "id"
            ],
            "description": "This represents a reference to a Customer Billing Cycle Specification resource.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a Customer Billing Cycle Specification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the Customer Billing Cycle Specification resource."
                }
            }
        },
        "customerDetails": {
            "title": "customerDetails",
            "description": "An entity that defines the Customer and Account details impacted by a Ticket or similar interaction.",
            "type": "object",
            "properties": {
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contact"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of contact associated with customer."
                },
                "customerId": {
                    "type": "string",
                    "description": "A unique identifier for a Customer."
                },
                "customerStatus": {
                    "$ref": "#/definitions/customerStatusEnum",
                    "description": "The current condition of a Customer, such as active or inactive."
                },
                "formattedCustomerName": {
                    "type": "string",
                    "description": "A formatted name of the Customer."
                },
                "accountId": {
                    "type": "string",
                    "description": "An unique identifier for a customer account (system identifier)."
                },
                "accountNumber": {
                    "type": "string",
                    "description": "The account number for the customer account. The account number is often unique, but is not required to be."
                },
                "accountName": {
                    "type": "string",
                    "description": "The name of the account, can be used for a customer-provided alias."
                },
                "pin": {
                    "type": "string",
                    "description": "A multidigit personal identification number that is used by a Customer to gain access to a CustomerAccount at an ATM, a computer, or a telephone system, and so forth."
                }
            }
        },
        "customerOrder": {
            "title": "customerOrder",
            "description": "A CustomerOrder is a communication used to procure a Product. There are different types of CustomerOrders, such as ASRs, LSRs, ProductOrders.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a customerOrder."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customerOrder resource."
                },
                "interactionStatus": {
                    "type": "string",
                    "description": "Status of the interaction."
                },
                "interactionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when interaction started."
                },
                "interactionDateComplete": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when interaction complete."
                },
                "interactionDescription": {
                    "type": "string",
                    "description": "A free form text for description of the interaction."
                },
                "assignedResponseDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The target response date assigned after review."
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "A number that uniquely identifies a CustomerOrder within the ordering Customer's enterprise."
                },
                "assignedPriority": {
                    "type": "integer",
                    "description": "The order's assigned priority after review."
                },
                "orderDueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date upon which the CustomerOrder is due for completion."
                },
                "customerOrderClassification": {
                    "$ref": "#/definitions/customerOrderTypeEnum",
                    "description": "An enumeration for types of Customer Order."
                },
                "businessInteractionRefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/businessInteractionRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Reference to the Business Interaction resource."
                },
                "customerOrderItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerOrderItem"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of customerOrderItem."
                }
            }
        },
        "customerOrderItem": {
            "title": "customerOrderItem",
            "description": "The purpose for the Customer Order expressed in terms of a Product Offering or a Product (for a change order) inherited from BusinessInteractionItem.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Distinguishes different instances of customerOrderItems on this Customer Order."
                },
                "quantity": {
                    "$ref": "#/definitions/quantity",
                    "description": "Quantity of a customerOrderItem involved in an interaction."
                },
                "action": {
                    "type": "string",
                    "description": "The action to take for an customerOrderItem, such as add, change, remove."
                },
                "status": {
                    "type": "string",
                    "description": "The current condition of an customerOrderItem, such as not started, in progress, completed."
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/formattedPropertyAddress"
                            },
                            {
                                "$ref": "#/definitions/propertyAddressReference"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A location involved in an interaction. For examle, John R home address is the location where an ordered Product will be installed."
                },
                "product": {
                    "$ref": "#/definitions/product",
                    "description": "The product of the customerOrderItem."
                }
            }
        },
        "customerOrderTypeEnum": {
            "title": "customerOrderTypeEnum",
            "description": "An enumeration of types of Customer Order.",
            "type": "string",
            "enum": [
                "New Connect",
                "Change",
                "Disconnect",
                "Records Correction"
            ]
        },
        "customerPayment": {
            "title": "customerPayment",
            "required": [
                "amount",
                "paymentMethod"
            ],
            "description": "Customer Payment represents the transfer of wealth from a customer for a product or usage of product.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the Customer Payment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customerPayment resource."
                },
                "amount": {
                    "$ref": "#/definitions/money",
                    "description": "The monetary amount of the payment made."
                },
                "paymentDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time that the payment was received."
                },
                "remainingAmount": {
                    "$ref": "#/definitions/money",
                    "description": "The amount remaining unpaid after this payment is applied to the outstanding billed amount."
                },
                "authorizationCode": {
                    "type": "string",
                    "description": "The authorization code for the payment."
                },
                "authorizationMessage": {
                    "type": "string",
                    "description": "The authorization message provided as information."
                },
                "authorizationTransactionId": {
                    "type": "string",
                    "description": "The transaction identifier for authorizing the payment."
                },
                "paymentTerminalInfo": {
                    "type": "string",
                    "description": "Information about / identifying the terminal unit at which the payment is made."
                },
                "cashierInfo": {
                    "type": "string",
                    "description": "Information about the cashier who tendered the payment."
                },
                "paymentConfirmationNumber": {
                    "type": "string",
                    "description": "The confirmation number given to the customer in response for the payment."
                },
                "description": {
                    "type": "string",
                    "description": "A textual description of the payment."
                },
                "paymentMethod": {
                    "$ref": "#/definitions/paymentMethod",
                    "description": "The Method that was used to make the Payment."
                },
                "paymentChannel": {
                    "$ref": "#/definitions/paymentChannel",
                    "description": "The Channel that is used to make a Payment."
                },
                "paymentLocation": {
                    "$ref": "#/definitions/paymentLocation",
                    "description": "The Location that a Payment was made."
                },
                "paymentInstrument": {
                    "$ref": "#/definitions/paymentInstrument",
                    "description": "The Payment Instrument, if any, used to make the Payment."
                }
            }
        },
        "customerPaymentSummary": {
            "title": "customerPaymentSummary",
            "required": [
                "amount"
            ],
            "description": "A summary of customerPayment represents the transfer of wealth from a customer for a product or usage of product.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the Customer Payment."
                },
                "amount": {
                    "$ref": "#/definitions/money",
                    "description": "The monetary amount of the payment made."
                },
                "paymentDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time that the payment was received."
                },
                "remainingAmount": {
                    "$ref": "#/definitions/money",
                    "description": "The amount remaining unpaid after this payment is applied to the outstanding billed amount."
                },
                "authorizationCode": {
                    "type": "string",
                    "description": "The authorization code for the payment."
                },
                "authorizationMessage": {
                    "type": "string",
                    "description": "The authorization message provided as information."
                },
                "authorizationTransactionId": {
                    "type": "string",
                    "description": "The transaction identifier for authorizing the payment."
                },
                "paymentTerminalInfo": {
                    "type": "string",
                    "description": "Information about / identifying the terminal unit at which the payment is made."
                },
                "cashierInfo": {
                    "type": "string",
                    "description": "Information about the cashier who tendered the payment."
                },
                "paymentConfirmationNumber": {
                    "type": "string",
                    "description": "The confirmation number given to the customer in response for the payment."
                },
                "description": {
                    "type": "string",
                    "description": "A textual description of the payment."
                }
            }
        },
        "customerProfile": {
            "title": "customerProfile",
            "required": [
                "id",
                "partyProfile"
            ],
            "description": "A summary view of a Customer resource",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for a Customer."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the full Customer resource."
                },
                "partyRoleId": {
                    "type": "string",
                    "description": "The unique identifier for this Customer Party Role."
                },
                "partyProfile": {
                    "type": "object",
                    "description": "Information about the individual or organization playing the Customer role.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "Contact mediums for the Customer.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "customerRank": {
                    "type": "string",
                    "description": "Degree of importance relative to other customers."
                },
                "status": {
                    "type": "string",
                    "description": "The current condition of a customer, such as active or inactive."
                },
                "customerSegment": {
                    "$ref": "#/definitions/customerSegment",
                    "description": "Segmentation of customers that has impacts on level of service and priority (e.g., Carrier, Strategic, Core)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the customer is valid for."
                }
            }
        },
        "customerRef": {
            "title": "customerRef",
            "required": [
                "id",
                "link"
            ],
            "description": "This represents a reference to a customer resource.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a customer."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the customer resource."
                }
            }
        },
        "customerSegment": {
            "title": "customerSegment",
            "required": [
                "name"
            ],
            "description": "An enumeration of the various lines of business that offer products to the market. The line of business can be used for organization of bill or web interface.",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "A word or term by which the customer customerSegment is known."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the customerSegment is."
                }
            }
        },
        "customerStatusEnum": {
            "title": "customerStatusEnum",
            "description": "The enumeration type of Status of a Customer.",
            "type": "string",
            "enum": [
                "Active",
                "Inactive"
            ]
        },
        "customerTickets": {
            "title": "customerTickets",
            "required": [
                "customerAccountProperties"
            ],
            "description": "Provides a single CustomerAccountSummary with associated Tickets for that account.",
            "type": "object",
            "properties": {
                "customerDetails": {
                    "$ref": "#/definitions/customerDetails",
                    "description": "An entity that defines the Customer and Account details impacted by a Ticket or similar interaction."
                },
                "tickets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ticket"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of Ticket associated to Customer."
                }
            }
        },
        "disability": {
            "title": "disability",
            "required": [
                "disabilityType"
            ],
            "description": "Represents a disability of an individual. E.g. Hearing Impaired, Vision Impaired.",
            "type": "object",
            "properties": {
                "disabilityType": {
                    "type": "string",
                    "enum": [
                        "visionImpared",
                        "hearingImpared",
                        "Other"
                    ],
                    "description": "The type of the disability."
                },
                "description": {
                    "type": "string",
                    "description": "An optional description of the disability."
                }
            }
        },
        "discountProdPriceAlteration": {
            "title": "discountProdPriceAlteration",
            "required": [
                "price",
                "priceClassification"
            ],
            "description": "A discount (a reduction of price) for a Product.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the discountProdPriceAlteration."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this discountProdPriceAlteration resource."
                },
                "productPriceName": {
                    "type": "string",
                    "description": "A short decriptive name such as 'affinity discount'."
                },
                "productPriceDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail the semantics of this component."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the price is valid."
                },
                "quantity": {
                    "$ref": "#/definitions/quantity",
                    "description": "Quantity of an interaction item involved in an interaction."
                },
                "price": {
                    "$ref": "#/definitions/money",
                    "description": "The amount of money that characterizes the price."
                },
                "priceClassification": {
                    "type": "string",
                    "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
                },
                "composedOfProdPrices": {
                    "$ref": "#/definitions/productPrices",
                    "description": "Product Prices that this Price may be composed of"
                }
            }
        },
        "document": {
            "title": "document",
            "required": [
                "objectType"
            ],
            "description": "A reference to a physical document such as a contract, manual or email.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "document"
                    ],
                    "description": "The type of the object, document."
                },
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the document."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the document."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the document."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the documentation."
                },
                "type": {
                    "type": "string",
                    "description": "The type of documentation (email, contract)."
                },
                "documentNumber": {
                    "type": "string",
                    "description": "A reference number assigned to a Document that follows a prescribed numbering system."
                },
                "documentLocation": {
                    "type": "string",
                    "description": "Link to document location."
                }
            }
        },
        "documentCollection": {
            "title": "documentCollection",
            "required": [
                "objectType"
            ],
            "description": "A collection of documentation.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "documentCollection"
                    ],
                    "description": "The type of the object, documentCollection."
                },
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the documentCollection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the documentCollection."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the document collection."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the document collection."
                },
                "type": {
                    "type": "string",
                    "description": "The type of document collection (email, contract)."
                }
            }
        },
        "documentation": {
            "title": "documentation",
            "description": "References to physical documentation artifacts (documents, document collections, emails, contracts) of interest to the organization.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the documentation."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the documentation."
                },
                "documents": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/document"
                            },
                            {
                                "$ref": "#/definitions/documentCollection"
                            }
                        ]
                    },
                    "description": "A document or collection of documents."
                }
            }
        },
        "documentationList": {
            "title": "documentationList",
            "description": "This represents a collection of Documentation resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Documentation collection."
                },
                "documentations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/documentation"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Documentation."
                }
            }
        },
        "driversLicenseIdentification": {
            "title": "driversLicenseIdentification",
            "required": [
                "driversLicenseNumber",
                "objectType"
            ],
            "description": "Represents a drivers license form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "driversLicenseIdentification"
                    ],
                    "description": "The type of the object, driversLicenseIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "driversLicenseNumber": {
                    "type": "string",
                    "description": "The identification number appearing on the drivers license."
                }
            }
        },
        "emailContact": {
            "title": "emailContact",
            "required": [
                "emailAddress",
                "objectType"
            ],
            "description": "The eMail address to use when contacting a given PartyRole. An eMailContact is a type of ContactMedium.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "emailContact"
                    ],
                    "description": "The type of the object, emailContact."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the Contact Medium is valid for.."
                },
                "isPreferred": {
                    "type": "boolean",
                    "description": "Indicates that the ContactMedium is the preferred means of contact."
                },
                "type": {
                    "type": "string",
                    "description": "The type of contact medium E.g., Home, Work, Mobile (for telephone numbers)."
                },
                "emailAddress": {
                    "type": "string",
                    "description": "Full email address in standard format."
                },
                "emailClassification": {
                    "type": "string",
                    "description": "Identifies the type of email address. I.e. Main, Home, Work, etc."
                }
            }
        },
        "emailContactList": {
            "title": "emailContactList",
            "description": "This represents a list of emailContact resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the emailContact list."
                },
                "emailContacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/emailContact"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of emailContact."
                }
            }
        },
        "employeeIdentification": {
            "title": "employeeIdentification",
            "required": [
                "employeeNumber",
                "objectType"
            ],
            "description": "Represents an employee id form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "employeeIdentification"
                    ],
                    "description": "The type of the object, employeeIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "employeePhoto": {
                    "type": "string",
                    "description": "A link to a photo of the employee."
                },
                "employeeNumber": {
                    "type": "string",
                    "description": "The employee identification number."
                }
            }
        },
        "enrollmentStatusEnum": {
            "title": "enrollmentStatusEnum",
            "description": "Enrollment Status.",
            "type": "string",
            "enum": [
                "Enrolled",
                "Not Enrolled",
                "Suspended"
            ]
        },
        "entitlement": {
            "title": "entitlement",
            "required": [
                "id"
            ],
            "description": "An Entitlement serves as proof of entitlement to an entitlement enforcement point. Presentation of a valid Entitlement results in the enforcement point granting access to the entitled content or resource.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the Entitlement."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Entitlement."
                },
                "entitlementData": {
                    "type": "string",
                    "description": "Data string that is used by the entitlement enforcement point in order to manage access to entitled resources."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the EntitlementToken is effective."
                },
                "entitlementType": {
                    "$ref": "#/definitions/entitlementType",
                    "description": "A category that describes the Entitlement, such as Linear Entitlement, VOD Entitlement, or Content Entitlement."
                },
                "entitlementName": {
                    "type": "string",
                    "description": "A name for the Entitlement."
                },
                "entitlementTerms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entitlementTerm"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A condition for an EntitlementToken (based upon the EntitlementAuthorizationTerm for the EntitlementAuthorization that authorized the Entitlement)."
                }
            }
        },
        "entitlementList": {
            "title": "entitlementList",
            "description": "This represents a collection of Entitlement resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Entitlement collection."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entitlement"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Entitlements."
                }
            }
        },
        "entitlementTerm": {
            "title": "entitlementTerm",
            "required": [
                "termName",
                "termValue"
            ],
            "description": "A condition for an EntitlementToken (based upon the EntitlementAuthorizationTerm for the EntitlementAuthorization that authorized the Entitlement).",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the entitlementTerm."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the entitlementTerm."
                },
                "termName": {
                    "type": "string",
                    "description": "The name of the EntitlementTerm. E.g. Downloads, DaysToWatch, etc."
                },
                "termValue": {
                    "type": "string",
                    "description": "The value of the EntitlementTerm."
                }
            }
        },
        "entitlementType": {
            "title": "entitlementType",
            "required": [
                "name"
            ],
            "description": "A category that describes the Entitlement, such as Linear Entitlement, VOD Entitlement, or Content Entitlement.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier of the entitlementType."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the entitlementType."
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for the entitlementType."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the entitlementType is."
                }
            }
        },
        "event-create-update": {
            "title": "event-create-update",
            "description": "A representation of an Event, used only for creating and updating an Event.",
            "type": "object",
            "properties": {
                "version": {
                    "type": "string",
                    "description": "An identification of the version number of the Event. The version may indicate different eventData contents, different EventCharacteristics, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the Event is known and distinguished from other Events."
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the event."
                },
                "status": {
                    "type": "string",
                    "description": "The current state of an event. Example values might include Active, Inactive, Acknowledged, etc."
                },
                "createDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the event occurrence."
                },
                "severity": {
                    "type": "string",
                    "description": "The criticality of the event as defined by the event source."
                },
                "eventCorrelationKey": {
                    "type": "string",
                    "description": "A value that can be used to correlate the Event to data in another system"
                },
                "processAfter": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date and time before which the Event should not be processed. This can be used as a 'delay' so that one system can raise an event and indicate that the event should not be processed until some future time (Ex. 15 minutes in the future to allow for STB provisioning messages to be sent to and processed by a STB)."
                },
                "eventSpecification": {
                    "$ref": "#/definitions/eventSpecification",
                    "description": "Specification of the event which will have same invariant characteristics in all instances."
                },
                "eventCategory": {
                    "$ref": "#/definitions/eventCategory",
                    "description": "A category classify the different event."
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/serviceSite"
                            },
                            {
                                "$ref": "#/definitions/formattedPropertyAddress"
                            },
                            {
                                "$ref": "#/definitions/propertyAddressReference"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of locations."
                },
                "eventData": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Textual or Binary data specific to an Event that is not captured in the form of EventCharacteristicValues. For example, a malformed or invalid XML payload that was not processed."
                }
            }
        },
        "event": {
            "title": "event",
            "required": [
                "id",
                "link"
            ],
            "description": "An occurence that has impact on another entity within the model. Examples include NetworkEvents, MediaEvents, UserEvents, SecurityEvents, etc.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for an event."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to an event resource."
                },
                "version": {
                    "type": "string",
                    "description": "An identification of the version number of the Event. The version may indicate different eventData contents, different EventCharacteristics, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the Event is known and distinguished from other Events."
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the event."
                },
                "status": {
                    "type": "string",
                    "description": "The current state of an event. Example values might include Active, Inactive, Acknowledged, etc."
                },
                "createDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of the event occurrence."
                },
                "severity": {
                    "type": "string",
                    "description": "The criticality of the event as defined by the event source."
                },
                "eventCorrelationKey": {
                    "type": "string",
                    "description": "A value that can be used to correlate the Event to data in another system."
                },
                "processAfter": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date and time before which the Event should not be processed. This can be used as a 'delay' so that one system can raise an event and indicate that the event should not be processed until some future time (Ex. 15 minutes in the future to allow for STB provisioning messages to be sent to and processed by a STB)."
                },
                "eventSpecification": {
                    "$ref": "#/definitions/eventSpecification",
                    "description": "Specification of the event which will have same invariant characteristics in all instances."
                },
                "eventCategory": {
                    "$ref": "#/definitions/eventCategory",
                    "description": "A category classify the different event."
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/serviceSite"
                            },
                            {
                                "$ref": "#/definitions/formattedPropertyAddress"
                            },
                            {
                                "$ref": "#/definitions/propertyAddressReference"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of locations."
                },
                "resource": {
                    "$ref": "#/definitions/genericPhysicalDevice",
                    "description": "A resource associated to the event."
                },
                "eventData": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Textual or Binary data specific to an Event that is not captured in the form of EventCharacteristicValues. For example, a malformed or invalid XML payload that was not processed."
                }
            }
        },
        "eventCategory": {
            "title": "eventCategory",
            "required": [
                "id",
                "link"
            ],
            "description": "A class to provide a means of classifying the event.  Typically used to distinguish Fault, Performance, Security, etc. related events.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for an eventCategory."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to an eventCategory resource."
                },
                "type": {
                    "type": "string",
                    "description": "Value of the category for the Event (e.g. Fault, Performance, Security)."
                },
                "description": {
                    "type": "string",
                    "description": "A description of the category for that event."
                }
            }
        },
        "eventSpecification": {
            "title": "eventSpecification",
            "required": [
                "id",
                "link"
            ],
            "description": "EventSpecification can be conceptually thought of as a template that different Event instances can be instantiated from. Each of these Event instances will have the same invariant characteristics. However, the other characteristics of the instantiated Event will be specific to each instance. This class can be thought of as a template, which represents a generic specification for implementing a particular type of Event. An EventSpecification may consist of other EventSpecifications supplied together as a collection. Members of the collection may be offered individually or collectively.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for an eventSpecification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to an eventSpecification resource."
                },
                "version": {
                    "type": "string",
                    "description": "An identification of the version number of the EventSpecification. The version may indicate different EventSpecCharacteristics and EventSpecCharacteristicValues, etc."
                },
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the EventSpecification is known and distinguished from other EventSpecifications."
                },
                "eventSpecTypeName": {
                    "type": "string",
                    "description": "The EventSpecificationType class defines a generic category of EventSpecifications. A short set of text readable characters to identify the kind of event - e.g. Fault, Performance, Security."
                }
            }
        },
        "extendedProperty": {
            "title": "extendedProperty",
            "required": [
                "name",
                "values"
            ],
            "description": "Describes the specific property extension.",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the ExtendedProperty is known and distinguished from other ExtendedProperties."
                },
                "description": {
                    "type": "string",
                    "description": "A narrative that explains the ExtendedProperty."
                },
                "unique": {
                    "type": "string",
                    "description": "An indicator that specifies if a value is unique for the specification. Possible values are; unique while value is in effect and unique whether value is in effect or not."
                },
                "valueType": {
                    "type": "string",
                    "description": "A kind of value that the characteristic can take on, such as numeric, text, and so forth."
                },
                "minCardinality": {
                    "type": "integer",
                    "description": "The minimum number of instances an ExtendedPropertyValue can take on. For example, zero to five phone numbers in a group calling plan, where zero is the value for the minCardinality."
                },
                "maxCardinality": {
                    "type": "integer",
                    "description": "The maximum number of instances an ExtendedProperty can take on. For example, zero to five phone numbers in a group calling plan, where five is the value for the maxCardinality."
                },
                "derivationFormula": {
                    "type": "string",
                    "description": "A rule or principle represented in symbols, numbers, or letters, often in the form of an equation used to derive the value of a property value."
                },
                "propertyGroup": {
                    "type": "string",
                    "description": "Used for grouping properties, e.g. similar properties could have the same PropertyGroup value."
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The collection of values for the ExtendedProperty"
                }
            }
        },
        "externalSystemReference-create-update": {
            "title": "externalSystemReference-create-update",
            "required": [
                "systemName"
            ],
            "description": "A representation of an External System Reference, used only for creating and updating.",
            "type": "object",
            "properties": {
                "referenceType": {
                    "type": "string",
                    "description": "The type of reference ID (e.g., Service Code)."
                },
                "systemName": {
                    "type": "string",
                    "description": "The name of the external system providing the reference."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the actual externalSystemReference-create-update."
                },
                "description": {
                    "type": "string",
                    "description": "A description of the actual externalSystemReference-create-update."
                }
            }
        },
        "faxContact": {
            "title": "faxContact",
            "required": [
                "faxNumber",
                "objectType"
            ],
            "description": "The fax number to use when contacting a given PartyRole. An Fax Contact is a type of Contact Medium.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "faxContact"
                    ],
                    "description": "The type of the object, faxContact."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the Contact Medium is valid for.."
                },
                "isPreferred": {
                    "type": "boolean",
                    "description": "Indicates that the ContactMedium is the preferred means of contact."
                },
                "type": {
                    "type": "string",
                    "description": "The type of contact medium E.g., Home, Work, Mobile (for telephone numbers)."
                },
                "faxNumber": {
                    "type": "string",
                    "description": "The fax telephone number."
                }
            }
        },
        "faxContactList": {
            "title": "faxContactList",
            "description": "This represents a list of faxContact resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the faxContact list."
                },
                "faxContacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/faxContact"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of faxContact."
                }
            }
        },
        "formattedPostalDeliveryAddress": {
            "title": "formattedPostalDeliveryAddress",
            "required": [
                "objectType"
            ],

            "description": "A representation of a postal delivery address, including PO box, rural route, and attention line / maildrop information.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "formattedPostalDeliveryAddress"
                    ],
                    "description": "A fielded postal delivery address."
                },
                "formattedAddressLine1": {
                    "type": "string",
                    "description": "A formatted address line that contains a non-fielded street address."
                },
                "formattedAddressLine2": {
                    "type": "string",
                    "description": "A formatted address line that contains a non-fielded street address, sub-address (e.g. Suite number), Rural Route information, PO Box number, etc."
                },
                "additionalpostalDeliveryInformation": {
                    "type": "string",
                    "description": "Additional postal delivery information, for example Site and Compartment information, attention line, or mail stop."
                },
                "buildingName": {
                    "type": "string",
                    "description": "Allows for buildings with well-known names to be used in an address."
                },
                "privateStreetName": {
                    "type": "string",
                    "description": "Private streets internal to a property (e.g., a university) with an internal name not recorded by the land title office."
                },
                "locality": {
                    "type": "string",
                    "description": "a bounded locality within a city, town or shire principally of urban character."
                },
                "city": {
                    "type": "string",
                    "description": "City that the address is in."
                },
                "stateOrProvince": {
                    "type": "string",
                    "description": "The state or province that the address is in."
                },
                "country": {
                    "type": "string",
                    "description": "The country that the address is in."
                },
                "postCode": {
                    "type": "string",
                    "description": "A descriptor for a postal delivery area, used to speed and simplify the delivery of mail."
                },
                "postcodeExtension": {
                    "type": "string",
                    "description": "The four-digit extension on an American postal code, what comes after the hyphen when specified."
                }
            }
        },
        "formattedPropertyAddress": {
            "title": "formattedPropertyAddress",
            "required": [
                "objectType"
            ],

            "description": "A structured textual way of describing how to find a Property, using unformatted strings for the street address.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "formattedPropertyAddress"
                    ],
                    "description": "A reference to a property address using unfielded street address information."
                },
                "formattedAddressLine1": {
                    "type": "string",
                    "description": "A formatted address line that contains a non-fielded street address."
                },
                "formattedAddressLine2": {
                    "type": "string",
                    "description": "A formatted address line that contains a non-fielded street address, sub-address (e.g. Suite number), etc."
                },
                "locality": {
                    "type": "string",
                    "description": "A bounded locality within a city, town or shire principally of urban character."
                },
                "city": {
                    "type": "string",
                    "description": "City that the address is in."
                },
                "stateOrProvince": {
                    "type": "string",
                    "description": "The state or province that the address is in."
                },
                "country": {
                    "type": "string",
                    "description": "The country that the address is in."
                },
                "postcode": {
                    "type": "string",
                    "description": "A descriptor for a postal delivery area, used to speed and simplify the delivery of mail. For US addresses, only the first five digits without extension."
                },
                "postcodeExtension": {
                    "type": "string",
                    "description": "The four-digit extension on postal code, what comes after the hyphen specified."
                }
            }
        },
        "fundsTransferPI": {
            "title": "fundsTransferPI",
            "required": [
                "bankRoutingNumber",
                "bankAccountNumber",
                "objectType"
            ],
            "description": "FundsTransferPI is an example of payment instrument, using which payment can be made by EFT.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "fundsTransferPI"
                    ],
                    "description": "The type of the object, fundsTransferPI."
                },
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for fundsTransferPI."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the fundsTransferPI resource."
                },
                "name": {
                    "type": "string",
                    "description": "A user friendly name for the fundsTransferPI."
                },
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form detail description of the fundsTransferPI."
                },
                "transitNumber": {
                    "type": "string",
                    "description": "transitNumber is used in Canada but not used in the US. To indentfy an account in a banking institution in the US, the routingNumber + accountNumber are used. To indentfy an account in a banking institution in Canada, the transitNumber + routingNumber (populated with the institution number) and accountNumber are used."
                },
                "bankRoutingNumber": {
                    "type": "string",
                    "description": "Bank routing number of the customer's bank."
                },
                "bankAccountNumber": {
                    "type": "string",
                    "description": "Bank account number of the customer."
                },
                "accountType": {
                    "type": "string",
                    "enum": [
                        "Savings",
                        "Checking"
                    ],
                    "description": "An enumeration of bank account types."
                }
            }
        },
        "fundsTransferPIList": {
            "title": "fundsTransferPIList",
            "description": "This represents a list of Funds Transfer PI resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Funds Transfer PI list."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "fundsTransferPI.json"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Funds Transfer PI."
                }
            }
        },
        "genericPhysicalDevice-create-update": {
            "title": "genericPhysicalDevice-create-update",
            "description": "A representation of a generic Physical Device for creation and update.",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form description of the Physical Device."
                },
                "versionNumber": {
                    "type": "string",
                    "description": "This is a string that identifies the version of this object."
                },
                "deviceType": {
                    "type": "string",
                    "description": "The type for a physical device. E.g. Cable Modem, STB, DVR Expander, Media Gateway, Media Player, Multi Media Terminal Adapter, etc."
                },
                "commonName": {
                    "type": "string",
                    "description": "Represents a user-friendly identifier of the Physical Device. It is a (possibly ambiguous) name by which the object is commonly known in some limited scope (such as an organization) and conforms to the naming conventions of the country or culture with which it is associated. It is NOT used as a naming attribute (i.e., to uniquely identify an instance of the object)."
                },
                "provisioningKey": {
                    "type": "string",
                    "description": "This key is used to link the things like VoD usage etc. This is being assigned by warehouse."
                },
                "serialNumber": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
                },
                "manufactureDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is a string attribute that defines the date of manufacture of this item."
                },
                "otherIdentifier": {
                    "type": "string",
                    "description": "This is a string that is used to contain other important identifying data, such as a bar code, of the hardware item."
                },
                "backplaneIndependent": {
                    "type": "boolean",
                    "description": "This is a boolean attribute that, if TRUE, indicates that this Physical Device has independent backplanes that can be managed separately."
                },
                "backplaneNumber": {
                    "type": "integer",
                    "description": "This is an integer that defines the number of backplanes that this device has."
                },
                "configurationOrder": {
                    "type": "string",
                    "description": "This is a free-form string that provides any order-specific instructions for configuring the set of components that together constitute this Physical Device."
                },
                "deviceGroupId": {
                    "type": "string",
                    "description": "This is a string, and is used to uniquely identify this device as a member of a group of devices."
                },
                "isComposite": {
                    "type": "boolean",
                    "description": "This is a Boolean attribute that, if TRUE, means that this Physical Device is in reality made up of a set of Physical Devices, each of which can be individually managed."
                },
                "canMixPower": {
                    "type": "boolean",
                    "description": "This is a Boolean attribute that, if TRUE, means that AC and/or DC power supplies can be used in this device. If it is false, then only one or the other can be used."
                },
                "isProvisionable": {
                    "type": "boolean",
                    "description": "Indicates whether this device is in a state that would allow provisioning."
                },
                "extendedProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/extendedProperty"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preference attributes of the Physical Device. The extended properties of the Physical Device which is not covered by common properties."
                },
                "genericPhysicalDeviceSpecification": {
                    "$ref": "#/definitions/genericPhysicalDeviceSpecRef",
                    "description": "Reference to the detailed specification for the Physical Device Device."
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/placeRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of location attributes of the Physical Device where this device is located."
                }
            }
        },
        "genericPhysicalDevice": {
            "title": "genericPhysicalDevice",
            "required": [
                "objectType"
            ],
            "description": "A full representation of a generic Physical Device.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "genericPhysicalDevice"
                    ],
                    "description": "The type object. E.g. genericPhysicalDevice."
                },
                "id": {
                    "type": "string",
                    "description": "Unambiguously distinguishes different object instances. It is the naming attribute of the object."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the genericPhysicalDevice Device resource."
                },
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form description of the Physical Device."
                },
                "versionNumber": {
                    "type": "string",
                    "description": "This is a string that identifies the version of this object."
                },
                "deviceType": {
                    "type": "string",
                    "description": "The type for a physical device. E.g. Cable Modem, STB, DVR Expander, Media Gateway, Media Player, Multi Media Terminal Adapter, etc."
                },
                "commonName": {
                    "type": "string",
                    "description": "Represents a user-friendly identifier of the Physical Device. It is a (possibly ambiguous) name by which the object is commonly known in some limited scope (such as an organization) and conforms to the naming conventions of the country or culture with which it is associated. It is NOT used as a naming attribute (i.e., to uniquely identify an instance of the object)."
                },
                "provisioningKey": {
                    "type": "string",
                    "description": "This key is used to link the things like VoD usage etc. This is being assigned by warehouse."
                },
                "serialNumber": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify different instances of the same hardware item. The ModelNumber and PartNumber attributes are used to identify different types of hardware items. This is a REQUIRED attribute."
                },
                "manufactureDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "This is a string attribute that defines the date of manufacture of this item."
                },
                "otherIdentifier": {
                    "type": "string",
                    "description": "This is a string that is used to contain other important identifying data, such as a bar code, of the hardware item."
                },
                "backplaneIndependent": {
                    "type": "boolean",
                    "description": "This is a boolean attribute that, if TRUE, indicates that this Physical Device has independent backplanes that can be managed separately."
                },
                "backplaneNumber": {
                    "type": "integer",
                    "description": "This is an integer that defines the number of backplanes that this device has."
                },
                "configurationOrder": {
                    "type": "string",
                    "description": "This is a free-form string that provides any order-specific instructions for configuring the set of components that together constitute this Physical Device."
                },
                "deviceGroupId": {
                    "type": "string",
                    "description": "This is a string, and is used to uniquely identify this device as a member of a group of devices."
                },
                "isComposite": {
                    "type": "boolean",
                    "description": "This is a Boolean attribute that, if TRUE, means that this Physical Device is in reality made up of a set of Physical Devices, each of which can be individually managed."
                },
                "canMixPower": {
                    "type": "boolean",
                    "description": "This is a Boolean attribute that, if TRUE, means that AC and/or DC power supplies can be used in this device. If it is false, then only one or the other can be used."
                },
                "isProvisionable": {
                    "type": "boolean",
                    "description": "Indicates whether this device is in a state that would allow provisioning."
                },
                "extendedProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/extendedProperty"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preference attributes of the Physical Device. The extended properties of the Physical Device which is not covered by common properties."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preference attributes of the Physical Device."
                },
                "genericPhysicalDeviceSpecification": {
                    "$ref": "#/definitions/genericPhysicalDeviceSpec",
                    "description": "The detail specification of the Physical Device Device."
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/placeRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of location attributes of the Physical Device where this device is located."
                },
                "owner": {
                    "$ref": "#/definitions/owner",
                    "description": "The owner of the Physical Device."
                }
            }
        },
        "genericPhysicalDeviceList": {
            "title": "genericPhysicalDeviceList",
            "description": "This represents a collection of generic physical device resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the collection."
                },
                "genericPhysicalDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericPhysicalDevice"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of generic physical devices."
                }
            }
        },
        "genericPhysicalDeviceSpec-create-update": {
            "title": "genericPhysicalDeviceSpec-create-update",
            "description": "This class describes specific attributes, behavior, relationships, constraints, and semantics for building generic PhysicalDevice objects.",
            "type": "object",
            "properties": {
                "deviceType": {
                    "type": "string",
                    "description": "The type for a physical device. E.g. Cable Modem, STB, DVR Expander, Media Gateway, Media Player, Multi Media Terminal Adapter, etc."
                },
                "commonName": {
                    "type": "string",
                    "description": "Represents a user-friendly identifier of an Physical Device. It is a (possibly ambiguous) name by which the Physical Device is commonly known in some limited scope (such as an organization) and conforms to the naming conventions of the country or culture with which it is associated. It is NOT used as a naming attribute (i.e., to uniquely identify an instance of the Physical Device)."
                },
                "modelNumber": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify model of the Physical Device. The ModelNumber and PartNumber attributes are used to identify different types of hardware items."
                },
                "manufacturerName": {
                    "type": "string",
                    "description": "The name of the original manufacturer of the Physical Device.  This may or may not match the vendor name."
                },
                "vendorName": {
                    "type": "string",
                    "description": "The name of the Vendor/manufacturer who provided the Physical Device."
                },
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form description of the Physical Device."
                },
                "warrantyPeriod": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "Defines manufacturer or vendors warranty period for this resource."
                },
                "physicalDeviceSpecHeight": {
                    "$ref": "#/definitions/quantity",
                    "description": "The height specification of the physical device."
                },
                "physicalDeviceSpecWidth": {
                    "$ref": "#/definitions/quantity",
                    "description": "The width specification of the physical device."
                },
                "physicalDeviceSpecDepth": {
                    "$ref": "#/definitions/quantity",
                    "description": "The depth specification of the physical device."
                },
                "physicalDeviceSpecDistToFront": {
                    "$ref": "#/definitions/quantity",
                    "description": "The distance to the front of the device from the mount point in a rack, if any. I.e. - the front face depth."
                },
                "physicalDeviceSpecDistToLeft": {
                    "$ref": "#/definitions/quantity",
                    "description": "Horizontal offset for placement of the Device."
                },
                "physicalDeviceSpecDistToBase": {
                    "$ref": "#/definitions/quantity",
                    "description": "The mounting distance from bottom of the Device to where the device may rack mount, if any."
                },
                "physicalDeviceSpecVersionNumber": {
                    "type": "string",
                    "description": "Firmware version of the physical device."
                },
                "extendedProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/extendedProperty"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preference attributes of the Physical Device. The extended properties of the Physical Device which is not covered by common properties."
                }
            }
        },
        "genericPhysicalDeviceSpec": {
            "title": "genericPhysicalDeviceSpec",
            "description": "This class describes specific attributes, behavior, relationships, constraints, and semantics for building generic PhysicalDevice objects.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unambiguously distinguishes different Physical Device Spec instances. It is the naming attribute of the Physical Device Spec."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Physical Device Spec resource."
                },
                "deviceType": {
                    "type": "string",
                    "description": "The type for a physical device. E.g. Cable Modem, STB, DVR Expander, Media Gateway, Media Player, Multi Media Terminal Adapter, etc."
                },
                "commonName": {
                    "type": "string",
                    "description": "Represents a user-friendly identifier of an Physical Device. It is a (possibly ambiguous) name by which the Physical Device is commonly known in some limited scope (such as an organization) and conforms to the naming conventions of the country or culture with which it is associated. It is NOT used as a naming attribute (i.e., to uniquely identify an instance of the Physical Device)."
                },
                "modelNumber": {
                    "type": "string",
                    "description": "This is a string that represents a manufacturer-allocated number used to identify model of the Physical Device. The ModelNumber and PartNumber attributes are used to identify different types of hardware items."
                },
                "manufacturerName": {
                    "type": "string",
                    "description": "The name of the original manufacturer of the Physical Device.  This may or may not match the vendor name."
                },
                "vendorName": {
                    "type": "string",
                    "description": "The name of the Vendor/manufacturer who provided the Physical Device."
                },
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form description of the Physical Device."
                },
                "warrantyPeriod": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "Defines manufacturer or vendors warranty period for this resource."
                },
                "physicalDeviceSpecHeight": {
                    "$ref": "#/definitions/quantity",
                    "description": "The height specification of the physical device."
                },
                "physicalDeviceSpecWidth": {
                    "$ref": "#/definitions/quantity",
                    "description": "The width specification of the physical device."
                },
                "physicalDeviceSpecDepth": {
                    "$ref": "#/definitions/quantity",
                    "description": "The depth specification of the physical device."
                },
                "physicalDeviceSpecDistToFront": {
                    "$ref": "#/definitions/quantity",
                    "description": "The distance to the front of the device from the mount point in a rack, if any. I.e. - the front face depth."
                },
                "physicalDeviceSpecDistToLeft": {
                    "$ref": "#/definitions/quantity",
                    "description": "Horizontal offset for placement of the Device."
                },
                "physicalDeviceSpecDistToBase": {
                    "$ref": "#/definitions/quantity",
                    "description": "The mounting distance from bottom of the Device to where the device may rack mount, if any."
                },
                "physicalDeviceSpecVersionNumber": {
                    "type": "string",
                    "description": "Firmware version of the physical device."
                },
                "extendedProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/extendedProperty"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preference attributes of the Physical Device. The extended properties of the Physical Device which is not covered by common properties."
                },
                "presentations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presentation"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of presentation of the Physical Device in a particular context."
                },
                "documentationCollection": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/documentation"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of references to Physical documentation artifacts related to business interactions."
                }
            }
        },
        "genericPhysicalDeviceSpecList": {
            "title": "genericPhysicalDeviceSpecList",
            "description": "This represents a collection of Generic Physical Device Spec resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Generic Physical Device Spec collection."
                },
                "genericPhysicalDeviceSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericPhysicalDeviceSpec"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Generic Physical Device Specs."
                }
            }
        },
        "genericPhysicalDeviceSpecRef": {
            "title": "genericPhysicalDeviceSpecRef",
            "required": [
                "id",
                "link"
            ],
            "description": "This represents a generic physical device specification ref object.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a generic physical device specification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to an generic physical device specification resource."
                }
            }
        },
        "genericProdPriceAlteration": {
            "title": "genericProdPriceAlteration",
            "required": [
                "price",
                "priceClassification"
            ],
            "description": "A genericProdPriceAlteration represents an amount, usually of money, that modifies the price charged for a Product.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the prodPriceAlteration."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this prodPriceAlteration resource."
                },
                "productPriceName": {
                    "type": "string",
                    "description": "A short decriptive name such as 'affinity discount'."
                },
                "productPriceDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail the semantics of this component."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the price is valid."
                },
                "quantity": {
                    "$ref": "#/definitions/quantity",
                    "description": "Quantity of an interaction item involved in an interaction."
                },
                "price": {
                    "$ref": "#/definitions/money",
                    "description": "The amount of money that characterizes the price."
                },
                "priceClassification": {
                    "type": "string",
                    "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
                },
                "composedOfProdPrices": {
                    "$ref": "#/definitions/productPrices",
                    "description": "Product Prices that this Price may be composed of"
                }
            }
        },
        "genericProdPriceCharge": {
            "title": "genericProdPriceCharge",
            "required": [
                "price",
                "priceClassification"
            ],
            "description": "A genericProdPriceCharge represents an amount, usually of money, that is asked for when a Product is bought, rented, or leased.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the prodPriceCharge."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this prodPriceCharge resource."
                },
                "productPriceName": {
                    "type": "string",
                    "description": "A short decriptive name such as 'affinity discount'."
                },
                "productPriceDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail the semantics of this component."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the price is valid."
                },
                "quantity": {
                    "$ref": "#/definitions/quantity",
                    "description": "Quantity of an interaction item involved in an interaction."
                },
                "price": {
                    "$ref": "#/definitions/money",
                    "description": "The amount of money that characterizes the price."
                },
                "priceClassification": {
                    "type": "string",
                    "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
                },
                "composedOfProdPrices": {
                    "$ref": "#/definitions/productPrices",
                    "description": "Product Prices that this Price may be composed of"
                }
            }
        },
        "genericServiceArea-create-update": {
            "title": "genericServiceArea-create-update",
            "required": [
                "serviceAreaCode"
            ],
            "description": "An area in which service is available by virtue of proximity to service delivering infrastructure, Examples of Service Areas include Digital Radio Concentrator Systems (DRCS), Fixed Radio Access (FRA) service areas and Cable service areas. For wireless service areas (e.g. WiFi, 3G mobile), it may be useful to model the signal strength contours as a collection of areas.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for service area."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to service area resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "serviceAreaName": {
                    "type": "string",
                    "description": "The name of the service area."
                },
                "serviceAreaCode": {
                    "type": "string",
                    "description": "The code for the service area."
                },
                "serviceAreaType": {
                    "type": "string",
                    "description": "The type of service area."
                }
            }
        },
        "genericServiceArea": {
            "title": "genericServiceArea",
            "required": [
                "serviceAreaCode",
                "objectType"
            ],
            "description": "An area in which service is available by virtue of proximity to service delivering infrastructure, Examples of Service Areas include Digital Radio Concentrator Systems (DRCS), Fixed Radio Access (FRA) service areas and Cable service areas. For wireless service areas (e.g. WiFi, 3G mobile), it may be useful to model the signal strength contours as a collection of areas.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "genericServiceArea"
                    ],
                    "description": "The type of the object, genericServiceArea."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for service area."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to service area resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "serviceAreaName": {
                    "type": "string",
                    "description": "The name of the service area."
                },
                "serviceAreaCode": {
                    "type": "string",
                    "description": "The code for the service area."
                },
                "serviceAreaType": {
                    "type": "string",
                    "description": "The type of service area."
                }
            }
        },
        "genericServiceAreaList": {
            "title": "genericServiceAreaList",
            "description": "This represents a list of genericServiceArea resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the genericServiceArea list."
                },
                "genericServiceAreas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericServiceArea"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of genericServiceArea."
                }
            }
        },
        "individualName": {
            "title": "individualName",
            "description": "The name by which an individual is known.",
            "type": "object",
            "properties": {
                "legalName": {
                    "type": "string",
                    "description": "Contains in one string a fully-formatted name with all of its pieces in their proper place including all necessary punctuation."
                },
                "formattedName": {
                    "type": "string",
                    "description": "Contains in one string a fully-formatted name with all of its pieces in their proper place including all necessary punctuation. This de-normalized form of the name cannot be easily parsed."
                },
                "aristocraticTitle": {
                    "type": "string",
                    "description": "An aristocratic title e.g. Baron, Graf, Earl, etc."
                },
                "formOfAddress": {
                    "type": "string",
                    "description": "Contains the salutation e.g., Mr., Mrs., Hon., Dr., Major."
                },
                "givenNames": {
                    "type": "string",
                    "description": "First name or names."
                },
                "preferredGivenName": {
                    "type": "string",
                    "description": "Contains the chosen name by which the person prefers to be addressed. This name may be a name other than a given name, such as a nickname."
                },
                "middleName": {
                    "type": "string",
                    "description": "Contains the middle name, names or initials."
                },
                "familyNamePrefix": {
                    "type": "string",
                    "description": "A string that comes before the familyName or names."
                },
                "familyNames": {
                    "type": "string",
                    "description": "Contains the non-chosen or inherited name. Also known as a person's last name in the West."
                },
                "familyGeneration": {
                    "type": "string",
                    "description": "The indication of generation e.g., Sr., Jr., III."
                },
                "qualifications": {
                    "type": "string",
                    "description": "Contains the letters used to describe academic or other type qualifications held by a person or the distinctions conferred upon them. E.g., PhD, MD, CPA, MCSD."
                }
            }
        },
        "individualSummary": {
            "title": "individualSummary",
            "required": [
                "individualNames",
                "objectType"
            ],
            "description": "A view of an individual party resource",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "individualSummary"
                    ],
                    "description": "The type of the object, individualSummary."
                },
                "id": {
                    "type": "string",
                    "description": "A unique identifier for a individual party."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the full individual party resource."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the party is valid for."
                },
                "gender": {
                    "type": "string",
                    "enum": [
                        "Female",
                        "Male",
                        "Unknown"
                    ],
                    "description": "Gender of the individual (Female, Male, Unknown)."
                },
                "placeOfBirth": {
                    "type": "string",
                    "description": "Place of birth for the individual (City, State, Country)."
                },
                "nationality": {
                    "type": "string",
                    "description": "Nationality of the individual."
                },
                "maritalStatus": {
                    "type": "string",
                    "enum": [
                        "Single",
                        "Married",
                        "Unknown"
                    ],
                    "description": "Marital status of the individual (Single, Married, Unknown)."
                },
                "skills": {
                    "type": "string",
                    "description": "Skills of the individual."
                },
                "aliveDuring": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period during which the individual is alive (birth date to death date)."
                },
                "individualNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/individualName"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The name of an individual."
                },
                "individualIdentifications": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/alternateIdentification"
                            },
                            {
                                "$ref": "#/definitions/birthCertificateIdentification"
                            },
                            {
                                "$ref": "#/definitions/contractorIdentification"
                            },
                            {
                                "$ref": "#/definitions/driversLicenseIdentification"
                            },
                            {
                                "$ref": "#/definitions/employeeIdentification"
                            },
                            {
                                "$ref": "#/definitions/medicalHealthCardIdentification"
                            },
                            {
                                "$ref": "#/definitions/membershipCardIdentification"
                            },
                            {
                                "$ref": "#/definitions/nationalIdentityCardIdentification"
                            },
                            {
                                "$ref": "#/definitions/passportIdentification"
                            },
                            {
                                "$ref": "#/definitions/provincialIdentification"
                            },
                            {
                                "$ref": "#/definitions/socialInsuranceIdentification"
                            },
                            {
                                "$ref": "#/definitions/socialSecurityIdentification"
                            },
                            {
                                "$ref": "#/definitions/stateIdentification"
                            },
                            {
                                "$ref": "#/definitions/studentIdentification"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Information about the Customer(s) associated with the Account."
                },
                "individualDisabilities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/disability"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A disability of an individual. E.g. Hearing Impaired, Vision Impaired."
                }
            }
        },
        "language-create-update": {
            "title": "language-create-update",
            "required": [
                "languageCode"
            ],
            "description": "Information about a language",
            "type": "object",
            "properties": {
                "languageCode": {
                    "type": "string",
                    "description": "Standard language code (e.g., en-US)."
                },
                "languageName": {
                    "type": "string",
                    "description": "Name of the language (e.g 'English', 'Spanish', etc)."
                },
                "alphabetName": {
                    "type": "string",
                    "description": "The alphabet name used for the language."
                },
                "dialectNames": {
                    "type": "string",
                    "description": "A list of the dialects of the language."
                }
            }
        },
        "language": {
            "title": "language",
            "required": [
                "id",
                "link",
                "languageCode"
            ],
            "description": "Information about a language",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for resource."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the resource."
                },
                "languageCode": {
                    "type": "string",
                    "description": "Standard language code (e.g., en-US)."
                },
                "languageName": {
                    "type": "string",
                    "description": "Name of the language (e.g 'English', 'Spanish', etc)."
                },
                "alphabetName": {
                    "type": "string",
                    "description": "The alphabet name used for the language."
                },
                "dialectNames": {
                    "type": "string",
                    "description": "A list of the dialects of the language."
                }
            }
        },
        "link": {
            "title": "link",
            "description": "Specifies relationships between the current document and an external resource.",
            "type": "object",
            "required": [
                "href",
                "rel"
            ],
            "properties": {
                "href": {
                    "type": "string",
                    "description": "A URL. Specifies the location of the linked document."
                },
                "rel": {
                    "type": "string",
                    "description": "Specifies the relationship between the current document and the linked document."
                },
                "title": {
                    "type": "string",
                    "description": "Provide additional / advisory information (expand on the meaning of the link)."
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "get",
                        "post"
                    ],
                    "description": "Specifies how to send the data (e.g. get, post)."
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the media type of the linked document."
                }
            }
        },
        "localServiceRequest": {
            "title": "localServiceRequest",
            "description": "A Local Service Request (LSR) contains information pertaining to the administrative, billing, service and contact details for a local service order as mandated in Ordering and Billing Forum(OBF) guidelines.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a customerOrder."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customerOrder resource."
                },
                "interactionStatus": {
                    "type": "string",
                    "description": "Status of the interaction."
                },
                "interactionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when interaction started."
                },
                "interactionDateComplete": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when interaction complete."
                },
                "interactionDescription": {
                    "type": "string",
                    "description": "A free form text for description of the interaction."
                },
                "assignedResponseDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The target response date assigned after review."
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "A number that uniquely identifies a CustomerOrder within the ordering Customer's enterprise."
                },
                "assignedPriority": {
                    "type": "integer",
                    "description": "The order's assigned priority after review."
                },
                "orderDueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date upon which the CustomerOrder is due for completion."
                },
                "customerOrderClassification": {
                    "$ref": "#/definitions/customerOrderTypeEnum",
                    "description": "An enumeration for types of Customer Order."
                },
                "businessInteractionRefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/businessInteractionRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Reference to the Business Interaction resource."
                },
                "customerOrderItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerOrderItem"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of customerOrderItem."
                }
            }
        },
        "locationSummary": {
            "title": "locationSummary",
            "description": "Summary of the location for an interaction.",
            "type": "object",
            "properties": {
                "elevation": {
                    "type": "string",
                    "description": "Elevation of the point."
                },
                "facility": {
                    "type": "string",
                    "description": "A specific building or other facility operated by a provider."
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude of the point."
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude of the point."
                },
                "marketArea": {
                    "$ref": "#/definitions/marketArea",
                    "description": "The specific market areas for a Cable operator."
                }
            }
        },
        "logicalResourceStateEnum": {
            "title": "logicalResourceStateEnum",
            "description": "Logical resource availability and usage (i.e. state)",
            "type": "string",
            "enum": [
                "Unknown",
                "In Service",
                "Out of Service",
                "Testing",
                "In Maintenance",
                "Not Available",
                "Not Applicable"
            ]
        },
        "logicalResourceStatusEnum": {
            "title": "logicalResourceStatusEnum",
            "description": "Logical Resource Status. 'Stopped': the Logical Resource is known to still exist, but it is no longer operational. However, it has not failed. 'Stressed': the Logical Resource is functioning, but needs attention (e.g., it may be overloaded in some way). 'Predicted Failure': the Logical Resource is functioning properly, but is predicting a failure in the near future. 'In Maintenance':  the Logical Resource is being configured, maintained, or otherwise administered and is NOT available for service. 'Unable To Contact': the monitoring system has knowledge of this Logical Resource but has never been able to establish communications with it. 'Lost Communications': the Logical Resource has been contacted successfully in the past and is known to still exist; however, it is currently unreachable.",
            "type": "string",
            "enum": [
                "Unknown",
                "OK",
                "Initializing",
                "Starting",
                "Paused",
                "Stopping",
                "Stopped",
                "Degraded",
                "Stressed",
                "Predicted Failure",
                "General Error",
                "Non Recoverable Error",
                "Not Installed or Not Present",
                "In Maintenance",
                "Unable To Contact",
                "Lost Communications"
            ]
        },
        "loyaltyAccountRef": {
            "title": "loyaltyAccountRef",
            "required": [
                "Id",
                "link"
            ],
            "description": "This represents loyaltyAccount ref object. A LoyaltyAccount corresponds to a set of balances to carry loyalty movement according to different valid period and unit. A LoyaltyAccount may be required to realize a LoyaltyProgramProduct according to the rules carried by the corresponding LoyaltyProgramProdSpec. This is defined by the needsLoyaltyAccount attribute on the LoyaltyProgramProdSpec entity. A LoyaltyAccount may collect results from one or more LoyaltyProgramProduct.",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "A unique idetifier for a loyaltyAccountRef."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the loyaltyAccountRef resource."
                }
            }
        },
        "loyaltyBurnPM": {
            "title": "loyaltyBurnPM",
            "required": [
                "objectType"
            ],
            "description": "One method of making a payment, using Loyalty Program points to pay a bill.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "loyaltyBurnPM"
                    ],
                    "description": "The type of the object, loyaltyBurnPM."
                },
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the loyaltyBurnPM."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the loyaltyBurnPM resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of a particular payment method."
                }
            }
        },
        "loyaltyProgram-create-update": {
            "title": "loyaltyProgram-create-update",
            "required": [
                "id",
                "productName"
            ],
            "description": "A representation of LoyaltyProgram product which is being used for creation and updation of loyaltyProgram.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product."
                },
                "productName": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the product is known and distinguished from other products."
                },
                "productDescription": {
                    "type": "string",
                    "description": "An explanation of what the product is."
                },
                "status": {
                    "$ref": "#/definitions/productStatusEnum",
                    "description": "The condition of the product, such as planned, designed, activated, disconnected."
                },
                "productSerialNumber": {
                    "type": "string",
                    "description": "A set of identifying characters and/or numbers assigned to, and usually marked on, each of a series of identical products."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period during which the product is applicable."
                },
                "productSpecification": {
                    "$ref": "#/definitions/productSpecificationRef",
                    "description": "Reference to the specification of the product."
                },
                "productOfferingRef": {
                    "$ref": "#/definitions/productOfferingRef",
                    "description": "Reference to the product offering."
                },
                "relatedProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productRelationship-create-update"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of product relationships."
                },
                "bundledProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/product-create-update"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of products."
                },
                "enrollmentStatus": {
                    "$ref": "#/definitions/enrollmentStatusEnum",
                    "description": "The current status of the Loyalty Program."
                },
                "enrollmentDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when enrollment in the Loyalty Program began."
                },
                "loyaltyAccount": {
                    "$ref": "#/definitions/loyaltyAccountRef",
                    "description": "A reference to the Loyalty Account."
                }
            }
        },
        "loyaltyProgram": {
            "title": "loyaltyProgram",
            "required": [
                "id",
                "productName"
            ],
            "description": "A LoyaltyProgramProduct is a type of ProductComponent. It is described by a LoyaltyProgramProdSpec.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this product resource."
                },
                "productName": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the product is known and distinguished from other products."
                },
                "productDescription": {
                    "type": "string",
                    "description": "An explanation of what the product is."
                },
                "status": {
                    "$ref": "#/definitions/productStatusEnum",
                    "description": "The condition of the product, such as planned, designed, activated, disconnected."
                },
                "productSerialNumber": {
                    "type": "string",
                    "description": "A set of identifying characters and/or numbers assigned to, and usually marked on, each of a series of identical products."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period during which the product is applicable."
                },
                "productSpecification": {
                    "$ref": "#/definitions/productSpecification",
                    "description": "Specification of the product."
                },
                "productOfferingRef": {
                    "$ref": "#/definitions/productOfferingRef",
                    "description": "Reference to the product offering."
                },
                "productPrices": {
                    "$ref": "#/definitions/productPrices",
                    "description": "A collection of productPrice for the product."
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/serviceRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of reference to the services."
                },
                "relatedProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productRelationship"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of product relationships."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preferences for the product."
                },
                "entitlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entitlement"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of entitilments for the product."
                },
                "bundledProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/product"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of products."
                },
                "enrollmentStatus": {
                    "$ref": "#/definitions/enrollmentStatusEnum",
                    "description": "The current status of the Loyalty Program."
                },
                "enrollmentDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when enrollment in the Loyalty Program began."
                },
                "loyaltyProgramHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/loyaltyProgramHistoryRecord"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of loyaltyProgramHistoryRecord."
                },
                "loyaltyAccount": {
                    "$ref": "#/definitions/loyaltyAccountRef",
                    "description": "A reference to the Loyalty Account."
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required."
                }
            }
        },
        "loyaltyProgramHistoryRecord": {
            "title": "loyaltyProgramHistoryRecord",
            "description": "A loyaltyProgramHistoryRecord records historical information about the loyaltyProgram. For example, Customer initiated subscription or un-subscription; un-subscription due to loss of eligibility (due to a change of Products subscribed), etc.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this product resource."
                },
                "dateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time of the LoyaltyProgram change."
                },
                "resultingProgramStatus": {
                    "type": "string",
                    "description": "The status of the loyaltyProgram as a result of the change."
                },
                "initiator": {
                    "type": "string",
                    "description": "The initiator of the change."
                },
                "reason": {
                    "type": "string",
                    "description": "The reason for the change (e.g. Loss of Eligibility, Customer requested un-subscribe, etc.)."
                },
                "historyData": {
                    "type": "string",
                    "description": "Additional data related to this history event."
                }
            }
        },
        "loyaltyProgramList": {
            "title": "loyaltyProgramList",
            "description": "This represents a collection of loyaltyProgram resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the loyaltyProgram collection."
                },
                "loyaltyPrograms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/loyaltyProgram"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of loyaltyPrograms."
                }
            }
        },
        "loyaltyProgramSpecification-create-update": {
            "title": "loyaltyProgramSpecification-create-update",
            "required": [
                "productSpecName",
                "needsLoyaltyAccount"
            ],
            "description": "A representation of loyaltyProgramSpecification which is being used for creation and updation of loyaltyProgramSpecification.",
            "type": "object",
            "properties": {
                "productSpecName": {
                    "type": "string",
                    "description": "The name of the product specification."
                },
                "productSpecDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the product spec is."
                },
                "productNumber": {
                    "type": "string",
                    "description": "An identification number assigned to uniquely identify the specification."
                },
                "brand": {
                    "type": "string",
                    "description": "The manufacturer or trademark of the specification."
                },
                "productSpecLifecycleStatus": {
                    "type": "string",
                    "description": "The condition of the product specification, such as active, inactive, planned."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the product specification is valid."
                },
                "productSpecClassifications": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/productSpecClassification"
                            },
                            {
                                "$ref": "#/definitions/productCategory"
                            },
                            {
                                "$ref": "#/definitions/productLine"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of productSpecClassfication for the productSpecification."
                },
                "needsLoyaltyAccount": {
                    "type": "string",
                    "description": "If TRUE, a LoyaltyAccount is needed for each LoyaltyProgramProduct created according to the LoyaltyProgramProdSpec."
                }
            }
        },
        "loyaltyProgramSpecification": {
            "title": "loyaltyProgramSpecification",
            "required": [
                "id",
                "productSpecName",
                "needsLoyaltyAccount"
            ],
            "description": "A LoyaltyProgramProdSpec is a type of AtomicProductSpecification, is packaged through ProductOffering and is instantiated in the same manner in the installed base (LoyaltyProgramProduct that is a type of ProductComponent). A LoyaltyProgramProdSpec defines one or more LoyaltyRules that have to be checked in order to identify the actions to apply.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product Specification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this product resource."
                },
                "productSpecName": {
                    "type": "string",
                    "description": "The name of the product specification."
                },
                "productSpecDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the product spec is."
                },
                "productNumber": {
                    "type": "string",
                    "description": "An identification number assigned to uniquely identify the specification."
                },
                "brand": {
                    "type": "string",
                    "description": "The manufacturer or trademark of the specification."
                },
                "productSpecLifecycleStatus": {
                    "type": "string",
                    "description": "The condition of the product specification, such as active, inactive, planned."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the product specification is valid."
                },
                "productSpecClassifications": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/productSpecClassification"
                            },
                            {
                                "$ref": "#/definitions/productCategory"
                            },
                            {
                                "$ref": "#/definitions/productLine"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of productSpecClassfication for the productSpecification."
                },
                "productSpecPresentations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presentation"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of presentations for the productSpecification."
                },
                "needsLoyaltyAccount": {
                    "type": "string",
                    "description": "If TRUE, a LoyaltyAccount is needed for each LoyaltyProgramProduct created according to the LoyaltyProgramProdSpec."
                }
            }
        },
        "loyaltyProgramSpecificationList": {
            "title": "loyaltyProgramSpecificationList",
            "description": "This represents a collection of loyaltyProgramSpecification resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the loyaltyProgramSpecification collection."
                },
                "loyaltyProgramSpecifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/loyaltyProgramSpecification"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of loyaltyProgramSpecifications."
                }
            }
        },
        "loyaltyProgramSummary": {
            "title": "loyaltyProgramSummary",
            "required": [
                "id",
                "link",
                "objectType"
            ],
            "description": "A summary view of the Loyalty Program.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "loyaltyProgramSummary"
                    ],
                    "description": "The type of the object, loyaltyProgramSummary."
                },
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the Loyalty Program."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this product resource."
                },
                "productName": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the product is known and distinguished from other products."
                },
                "productDescription": {
                    "type": "string",
                    "description": "An explanation of what the product is."
                },
                "productStatus": {
                    "type": "string",
                    "description": "The condition of the product, such as planned, designed, activated, disconnected."
                },
                "productSerialNumber": {
                    "type": "string",
                    "description": "A set of identifying characters and/or numbers assigned to, and usually marked on, each of a series of identical products."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period during which the product is applicable."
                },
                "enrollmentStatus": {
                    "type": "string",
                    "description": "The current status of the Loyalty Program."
                },
                "enrollmentDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time when enrollment in the Loyalty Program began."
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A collection of contactMedium which will be used to establish communication.",
                    "minItems": 1,
                    "uniqueItems": true
                }
            }
        },
        "managedUserCredential": {
            "title": "managedUserCredential",
            "required": [
                "userId"
            ],
            "description": "A user credential that is provided by and authenticated by the service provider.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the user credential."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the userCredential resource."
                },
                "userId": {
                    "type": "string",
                    "description": "Sometimes referred to as a username, this is the identifier that is used in combination with a password to authenticate a user for access to provider services or account management."
                },
                "userAccountController": {
                    "type": "string",
                    "description": "Identifies the system (or controller) responsible for processing the user authentication."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the credential is valid."
                },
                "adminStatus": {
                    "$ref": "#/definitions/customerAccountStatusEnum",
                    "description": "Specifies the current administrative status of an account (e.g., Active, Suspended)."
                },
                "userCredentialCategory": {
                    "type": "string",
                    "description": "Specifies the type of credential as the login account could be for a web portal, an application, an Operating System, etc. Suggested values: APPLICATION, OPERATINGSYSTEM, UMS-L, UMS-C, WEBPORTAL. By default all accounts are deemed to be APPLICATION."
                },
                "usageType": {
                    "$ref": "#/definitions/credentialUsageEnum",
                    "description": "Specifies whether the credential is shared (i.e., multiple users use the credential to access a target) or individual (assigned to a single user)."
                },
                "password": {
                    "type": "string",
                    "description": "The (hashed) password for the managed credential."
                }
            }
        },
        "managedUserCredentialList": {
            "title": "managedUserCredentialList",
            "description": "This represents a list of managedUserCredential resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the managedUserCredential list."
                },
                "managedUserCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/managedUserCredential"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of managedUserCredential."
                }
            }
        },
        "marketArea-create-update": {
            "title": "marketArea-create-update",
            "required": [
                "marketAreaName"
            ],
            "description": "A market area is usually made up of contiguous geographic units with somewhat similar demographic characteristics.",
            "properties": {
                "code": {
                    "type": "string",
                    "description": "A code or mnemonic for the MarketArea"
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the market area is valid for."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "marketAreaName": {
                    "type": "string",
                    "description": "The name of the market area."
                },
                "marketAreaClassification": {
                    "type": "string",
                    "description": "Identifies the type of market area."
                },
                "marketAreaType": {
                    "type": "string",
                    "description": "The type of market area."
                }
            }
        },
        "marketArea": {
            "title": "marketArea",
            "required": [
                "objectType",
                "id",
                "link",
                "marketAreaName"
            ],
            "description": "A market area is usually made up of contiguous geographic units with somewhat similar demographic characteristics.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "marketArea"
                    ],
                    "description": "The type of the object, marketArea."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for marketArea."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this marketArea resource."
                },
                "code": {
                    "type": "string",
                    "description": "A code or mnemonic for the MarketArea"
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the market area is valid for."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "marketAreaName": {
                    "type": "string",
                    "description": "The name of the market area."
                },
                "marketAreaClassification": {
                    "type": "string",
                    "description": "Identifies the type of market area."
                },
                "marketAreaType": {
                    "type": "string",
                    "description": "The type of market area."
                }
            }
        },
        "marketAreaList": {
            "title": "marketAreaList",
            "description": "This represents a list of Market Area resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Market Area list."
                },
                "marketAreas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/marketArea"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Market Area."
                }
            }
        },
        "medicalHealthCardIdentification": {
            "title": "medicalHealthCardIdentification",
            "required": [
                "medicalHealthCardNumber",
                "objectType"
            ],
            "description": "Represents a medical health card form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "medicalHealthCardIdentification"
                    ],
                    "description": "The type of the object, medicalHealthCardIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "medicalHealthCardNumber": {
                    "type": "string",
                    "description": "Medical health card number."
                }
            }
        },
        "membershipCardIdentification": {
            "title": "membershipCardIdentification",
            "required": [
                "membershipIdNumber",
                "objectType"
            ],
            "description": "Represents a membership card form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "membershipCardIdentification"
                    ],
                    "description": "The type of the object, membershipCardIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "membershipIdNumber": {
                    "type": "string",
                    "description": "Membership ID number."
                },
                "membershipClassification": {
                    "type": "string",
                    "description": "Membership classification or type."
                }
            }
        },
        "money": {
            "title": "money",
            "description": "A base / value business entity used to represent money.",
            "type": "object",
            "required": [
                "amount",
                "units"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "description": "A floating point number representing the money amount."
                },
                "units": {
                    "type": "string",
                    "description": "Currency of the money amount."
                }
            }
        },
        "nationalIdentityCardIdentification": {
            "title": "nationalIdentityCardIdentification",
            "required": [
                "cardNumber",
                "objectType"
            ],
            "description": "Represents a national identity card form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "nationalIdentityCardIdentification"
                    ],
                    "description": "The type of the object, nationalIdentityCardIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "cardNumber": {
                    "type": "string",
                    "description": "The identification number appearing on the national identity card."
                }
            }
        },
        "oneTimeAppliedCustomerBillingProductCharge": {
            "title": "oneTimeAppliedCustomerBillingProductCharge",
            "required": [
                "creationDate",
                "rateAmount",
                "OneTimeChargeType"
            ],
            "description": "An One Time charge or a credit assigned to the customers account in the course for the purpose of the billing process.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the oneTimeAppliedCustomerBillingProductCharge."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the oneTimeAppliedCustomerBillingProductCharge resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                },
                "OneTimeChargeType": {
                    "type": "string",
                    "description": "The type of One Time Charge applied to Customer Bills."
                }
            }
        },
        "oneTimeChargeProdPriceCharge": {
            "title": "oneTimeChargeProdPriceCharge",
            "required": [
                "price",
                "priceClassification"
            ],
            "description": "An one-time charge is levied once. An example is an activation fee.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the oneTimeChargeProdPriceCharge."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this oneTimeChargeProdPriceCharge resource."
                },
                "productPriceName": {
                    "type": "string",
                    "description": "A short decriptive name such as 'affinity discount'."
                },
                "productPriceDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail the semantics of this component."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the price is valid."
                },
                "quantity": {
                    "$ref": "#/definitions/quantity",
                    "description": "Quantity of an interaction item involved in an interaction."
                },
                "price": {
                    "$ref": "#/definitions/money",
                    "description": "The amount of money that characterizes the price."
                },
                "priceClassification": {
                    "type": "string",
                    "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
                },
                "composedOfProdPrices": {
                    "$ref": "#/definitions/productPrices",
                    "description": "Product Prices that this Price may be composed of"
                }
            }
        },
        "organizationName": {
            "title": "organizationName",
            "description": "The name by which an organization is known.",
            "type": "object",
            "properties": {
                "formattedOrganizationName": {
                    "type": "string",
                    "description": "The name of the organization."
                },
                "nameType": {
                    "type": "string",
                    "description": "The type of organization name. E.g., Co., Inc., Ltd., Pty Ltd. , Plc., Gmbh."
                },
                "tradingName": {
                    "type": "string",
                    "description": "The name that the organization trades under."
                }
            }
        },
        "organizationSummary": {
            "title": "organizationSummary",
            "required": [
                "organizationNames",
                "objectType"
            ],
            "description": "A view of an organization party resource",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "organizationSummary"
                    ],
                    "description": "The type of the object, organizationSummary."
                },
                "id": {
                    "type": "string",
                    "description": "A unique identifier for a organization party."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the full organization party resource."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Organization is valid."
                },
                "isLegalEntity": {
                    "type": "boolean",
                    "description": "Identifies whether the organization is a legal entity."
                },
                "existsDuring": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period during which the organization exist. For a legal entiy, this would be incorporation date to the disincorporation date."
                },
                "organizationClassification": {
                    "type": "string",
                    "description": "The type of Organization."
                },
                "organizationNames": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/organizationName"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The names by which an Organization is known."
                },
                "organizationIdentifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/companyRegistration"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Information about the Customer(s) associated with the Account."
                }
            }
        },
        "owner": {
            "title": "owner",
            "required": [
                "party"
            ],
            "description": "Represents an individual, organization or organization unit.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for party Role."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the party resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the PartyRole in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the PartyRole is valid."
                }
            }
        },
        "ownerList": {
            "title": "ownerList",
            "description": "This represents a collection of Owner resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Owner collection."
                },
                "owners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/owner"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Owner."
                }
            }
        },
        "partner": {
            "title": "partner",
            "required": [
                "party"
            ],
            "description": "Represents a Partner.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for Partner."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Partner resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the partner in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the partner is valid."
                }
            }
        },
        "partnerAccountToken": {
            "title": "partnerAccountToken",
            "description": "An PartnerAccountToken provides a way for a Partner to identify an MSO Customer's account using a token assigned by the MSO.",
            "type": "object",
            "properties": {
                "AccountToken": {
                    "type": "string",
                    "description": "An identifier for a CustomerAccount that is used by a Partner to refer to the account."
                },
                "TokenType": {
                    "type": "string",
                    "description": "An optional type for the PartnerAccountToken."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the PartnerAccountToken is valid."
                }
            }
        },
        "partnerList": {
            "title": "partnerList",
            "description": "This represents a list of partner resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the partner list."
                },
                "partners": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/partner"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of partner."
                }
            }
        },
        "passportIdentification": {
            "title": "passportIdentification",
            "required": [
                "passportNumber",
                "objectType"
            ],
            "description": "Represents a passport form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "passportIdentification"
                    ],
                    "description": "The type of the object, passportIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "passportType": {
                    "type": "string",
                    "description": "The type of Passport, e.g. Personal, Consular"
                },
                "passportNumber": {
                    "type": "string",
                    "description": "The unique identifier per passport issuer"
                },
                "issuingCountry": {
                    "type": "string",
                    "description": "The country issuing the passport"
                }
            }
        },
        "paymentActivity": {
            "title": "paymentActivity",
            "required": [
                "lastPaymentAmount",
                "lastPaymentDate"
            ],
            "description": "Information about a payment.",
            "type": "object",
            "properties": {
                "lastPaymentAmount": {
                    "$ref": "#/definitions/money",
                    "description": "The amount of the last payment received from the Customer."
                },
                "lastPaymentDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date of the last payment received from the Customer."
                }
            }
        },
        "paymentCardPI": {
            "title": "paymentCardPI",
            "required": [
                "cardIssuer",
                "paymentCardNumber",
                "nameOnCard",
                "paymentCardType",
                "objectType"
            ],
            "description": "PaymentCardPI is an example of payment instrument, using which payment can be made by credit card.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "paymentCardPI"
                    ],
                    "description": "The type of the object, paymentCardPI."
                },
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for paymentCardPI."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the paymentCardPI resource."
                },
                "name": {
                    "type": "string",
                    "description": "A user friendly name for the paymentCardPI."
                },
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form detail description of the paymentCardPI."
                },
                "cardIssuer": {
                    "type": "string",
                    "description": "The name of the card issuing organization."
                },
                "paymentCardNumber": {
                    "type": "string",
                    "description": "Card number of the payment card."
                },
                "nameOnCard": {
                    "type": "string",
                    "description": "Card holder name on the payment card."
                },
                "expirationMonth": {
                    "type": "string",
                    "description": "The expiration month of the payment card."
                },
                "expirationYear": {
                    "type": "string",
                    "description": "The expiration year of the payment card."
                },
                "paymentCardType": {
                    "$ref": "#/definitions/cardTypeEnum",
                    "description": "Type of the payment card."
                },
                "cardVerificationCode": {
                    "type": "string",
                    "description": "Verification code of the payment card."
                }
            }
        },
        "paymentCardPIList": {
            "title": "paymentCardPIList",
            "description": "This represents a list of Payment Card PI resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Payment Card PI list."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/paymentCardPI"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Payment Card PIs."
                }
            }
        },
        "paymentCardPM": {
            "title": "paymentCardPM",
            "required": [
                "paymentCardType",
                "objectType"
            ],
            "description": "One method of making a payment, via a Payment Card. paymentCardPM is an example of payment method, using which payment can be made by credit card.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "paymentCardPM"
                    ],
                    "description": "The type of the object, paymentCardPM."
                },
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the paymentCardPM."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the paymentCardPM resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of a particular payment method."
                },
                "cardIssuer": {
                    "type": "string",
                    "description": "The name of the organization that used a Payment Card."
                },
                "cardLastFourDigits": {
                    "type": "string",
                    "description": "The last four digits of the Payment Card number."
                },
                "expirationMonth": {
                    "type": "string",
                    "description": "The expiration month of the Payment Card."
                },
                "expirationYear": {
                    "type": "string",
                    "description": "The expiration year of the Payment Card."
                },
                "paymentCardType": {
                    "$ref": "#/definitions/paymentCardTypeEnum",
                    "description": "The type (credit, debit, gift) of Payment Card."
                },
                "merchantId": {
                    "type": "string",
                    "description": "An identifier of the merchant that is known to the third party payment processor in order to allow customers to make payments to the identified merchant through the third party."
                }
            }
        },
        "paymentCardTypeEnum": {
            "title": "paymentCardTypeEnum",
            "description": "An enumeration of Payment Card types.",
            "type": "string",
            "enum": [
                "Credit",
                "Debit",
                "Gift Card"
            ]
        },
        "paymentChannel": {
            "title": "paymentChannel",
            "required": [
                "id"
            ],
            "description": "Represents the part of the business that took the payment. Examples include 'Retail', 'Collections', 'Sales', etc.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the Payment Channel."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the paymentChannel resource."
                },
                "name": {
                    "type": "string",
                    "description": "A common name that represents the PaymentChannel. For example 'Small Business Sales'."
                },
                "description": {
                    "type": "string",
                    "description": "An explanation of the Payment Channel."
                }
            }
        },
        "paymentInstrument": {
            "title": "paymentInstrument",
            "description": "PaymentInstrument is a known, stored way in which customer provides payment on a customer Bill, for example credit, transfer.",
            "type": "object",
            "properties": {
                "paymentInstrument": {
                    "type": "object",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/fundsTransferPI"
                        },
                        {
                            "$ref": "#/definitions/paymentCardPI"
                        },
                        {
                            "$ref": "#/definitions/tokenizedPaymentCardPI"
                        },
                        {
                            "$ref": "#/definitions/tokenizedThirdPartyPI"
                        },
                        {
                            "$ref": "#/definitions/paymentInstrumentReferencePI"
                        }
                    ],
                    "description": "A known Payment Intrument for making payments on a customer bill."
                }
            }
        },
        "paymentInstrumentList": {
            "title": "paymentInstrumentList",
            "description": "This represents a collection of Payment Instrument resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the PhysicalDevice collection."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/fundsTransferPI"
                            },
                            {
                                "$ref": "#/definitions/paymentCardPI"
                            },
                            {
                                "$ref": "#/definitions/tokenizedPaymentCardPI"
                            },
                            {
                                "$ref": "#/definitions/tokenizedThirdPartyPI"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Payment Instruments."
                }
            }
        },
        "paymentInstrumentReferencePI": {
            "title": "paymentInstrumentReferencePI",
            "required": [
                "paymentInstrumentType"
            ],
            "description": "Allows a particular payment instrument type to be used by reference.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "paymentInstrumentReferencePI"
                    ],
                    "description": "The type of the object, paymentInstrumentReferencePI."
                },
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for paymentInstrumentReferencePI."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the paymentInstrumentReferencePI resource."
                },
                "name": {
                    "type": "string",
                    "description": "A user friendly name for the paymentInstrumentReferencePI."
                },
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form detail description of the paymentInstrumentReferencePI."
                },
                "paymentInstrumentType": {
                    "$ref": "#/definitions/paymentInstrumentTypeEnum",
                    "description": "An enumerated string that indicates the type of payment instrument being referenced."
                },
                "paymentInstrumentKey": {
                    "type": "string",
                    "description": "Reference to the payment instrument."
                }
            }
        },
        "paymentInstrumentTypeEnum": {
            "title": "paymentInstrumentTypeEnum",
            "description": "Payment Instrument Types",
            "type": "string",
            "enum": [
                "FundsTransferPI",
                "PaymentCardPI",
                "TokenizedPaymentCardPI",
                "TokenizedThirdPartyPI"
            ]
        },
        "paymentItem": {
            "title": "paymentItem",
            "required": [
                "appliedAmount",
                "customerPayment"
            ],
            "description": "PaymentItem is the application of CustomerPayment. PaymentItem is applied to CustomerBillInvoice, AppliedCustomerBillingRate.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the paymentItem."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the paymentItem resource."
                },
                "appliedAmount": {
                    "$ref": "#/definitions/money",
                    "description": "The amount of money that has been applied to specific entity, such as CustomerBill."
                },
                "customerPayment": {
                    "$ref": "#/definitions/customerPayment",
                    "description": "CustomerPayment represents the transfer of wealth from a customer for a product or usage of product."
                }
            }
        },
        "paymentLocation": {
            "title": "paymentLocation",
            "required": [
                "id"
            ],
            "description": "Represents a location where a Customer may make a Payment. This may represent a retail store, a business office, a mall kiosk, etc.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the Payment Location."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the paymentLocation resource."
                },
                "name": {
                    "type": "string",
                    "description": "A common name that represents the Payment Location (e.g. Camp Creek Road Business Office)."
                },
                "type": {
                    "type": "string",
                    "description": "Describes the nature of the Payment Location. Examples include 'Business Office', 'Retail Store', 'Third Party' (e.g. a bank that takes payment on behalf of the Company)."
                }
            }
        },
        "paymentMethod": {
            "title": "paymentMethod",
            "description": "PaymentMethod is the way in which customer provides payment, e.g. cash, credit, transfer, etc.",
            "type": "object",
            "properties": {
                "paymentMethod": {
                    "type": "object",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/accountBalancePM"
                        },
                        {
                            "$ref": "#/definitions/bankTransferPM"
                        },
                        {
                            "$ref": "#/definitions/cashPM"
                        },
                        {
                            "$ref": "#/definitions/checkPM"
                        },
                        {
                            "$ref": "#/definitions/loyaltyBurnPM"
                        },
                        {
                            "$ref": "#/definitions/paymentCardPM"
                        },
                        {
                            "$ref": "#/definitions/thirdPartyPM"
                        }
                    ],
                    "description": "A known Payment Method for making payments."
                }
            }
        },
        "paymentPlan": {
            "title": "paymentPlan",
            "required": [
                "paymentPlanPriority",
                "paymentPlanType",
                "paymentInstrument"
            ],
            "description": "PaymentPlan defines the plan for payment via its associations to the PaymentMethod and PaymentItem priorities.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for PaymentPlan."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the PaymentPlan resource."
                },
                "paymentPlanPriority": {
                    "type": "integer",
                    "description": "The relative rank of the PaymentPlan compared to other PaymentPlans."
                },
                "paymentPlanType": {
                    "type": "string",
                    "enum": [
                        "Preauthorized",
                        "AdHoc"
                    ],
                    "description": "A grouping of PaymentPlans that have strongly marked and readily defined similarities."
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Effective",
                        "Ineffective"
                    ],
                    "description": "A condition of the PaymentPlan that is subject to change. effective or ineffective."
                },
                "paymentLimit": {
                    "$ref": "#/definitions/money",
                    "description": "This optional attribute defined the maximum payment amount that can be applied by this payment method."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The start and end date for the PaymentPlan."
                },
                "paymentInstrument": {
                    "$ref": "#/definitions/paymentInstrument",
                    "description": "A known instrument for making payments on a customer bill."
                }
            }
        },
        "paymentPlanList": {
            "title": "paymentPlanList",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the list."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/paymentPlan"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array for Payment Plans."
                }
            }
        },
        "phoneContact": {
            "title": "phoneContact",
            "required": [
                "phone",
                "objectType"
            ],
            "description": "The phone number and extension to use when contacting a given PartyRole. An Phone Contact is a type of Contact Medium.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "phoneContact"
                    ],
                    "description": "The type of the object, phoneContact."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the Contact Medium is valid for.."
                },
                "isPreferred": {
                    "type": "boolean",
                    "description": "Indicates that the ContactMedium is the preferred means of contact."
                },
                "type": {
                    "type": "string",
                    "description": "The type of contact medium E.g., Home, Work, Mobile (for telephone numbers)."
                },
                "phone": {
                    "type": "string",
                    "description": "Full telephone number in standard format."
                },
                "phoneExtension": {
                    "type": "string",
                    "description": "Telephone number extension."
                }
            }
        },
        "phoneContactList": {
            "title": "phoneContactList",
            "description": "This represents a list of phoneContact resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the phoneContact list."
                },
                "phoneContacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/phoneContact"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of phoneContact."
                }
            }
        },
        "physicalDeviceList": {
            "title": "physicalDeviceList",
            "description": "This represents a collection of PhysicalDevice resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the PhysicalDevice collection."
                },
                "physicalDevices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericPhysicalDevice"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of PhysicalDevice."
                }
            }
        },
        "placeRef": {
            "title": "placeRef",
            "required": [
                "placeId",
                "link"
            ],
            "description": "This represents placeRef object.",
            "type": "object",
            "properties": {
                "placeId": {
                    "type": "string",
                    "description": "A unique idetifier for place."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the place resource."
                }
            }
        },
        "policy": {
            "title": "policy",
            "required": [
                "id",
                "link"
            ],
            "description": "This is an abstract base class, and is the root of the Policy model. As such, it defines common attributes, methods and relationships that all policy subclasses use and take part in.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for an policy."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to an policy resource."
                },
                "policyKeywords": {
                    "type": "string",
                    "description": "This defines a keywords that a policy administrator may use to assist in characterizing or categorizing a policy object to facilitate search operations."
                },
                "policyName": {
                    "type": "string",
                    "description": "This is a naming attribute that can be used to identify different policy entities."
                }
            }
        },
        "policyRule": {
            "title": "policyRule",
            "required": [
                "id",
                "link"
            ],
            "description": "The policyRule realizes the event, condition, passaction, failaction semantics that form a policy rule. The semantics of this rule are that the rule is evaluated when an event occurs. If the condition clause is satisfied, then the pass-action clause will be executed, otherwise the fail-action clause will be executed.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for an policyRule."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to an policyRule resource."
                },
                "policyKeywords": {
                    "type": "string",
                    "description": "This defines a keywords that a policy administrator may use to assist in characterizing or categorizing a policy object to facilitate search operations."
                },
                "policyName": {
                    "type": "string",
                    "description": "This is a naming attribute that can be used to identify different policy entities."
                },
                "isManditoryEvaluation": {
                    "type": "boolean",
                    "description": "If TRUE, signifies that evaluation (and possibly action execution) of this entity is mandatory and must be attempted. If it is FALSE, then the evaluation of this entity is considered to be 'best effort' and may be ignored."
                },
                "policySetUsage": {
                    "type": "string",
                    "description": "This is a free-form string that recommends how this policy object should be used."
                },
                "isCNF": {
                    "type": "boolean",
                    "description": "If TRUE, defines the condition clause of this rule to be represented in Conjunctive Normal Form (e.g., an AND of ORs). If it is FALSE, then the condition clause will be represented in Disjunctive Normal Form (e.g., an OR of ANDs). This attribute controls the setting of how multiple condition clauses (as represented by multiple PolicyConditionComposite objects) are treated in the PolicyRule. As such, it is different from the attribute PolicyConditionComposite. IsCNF, which controls how multiple PolicyConditionAtomic objects are treated in a (single) PolicyConditionComposite object."
                },
                "hasSubRules": {
                    "type": "boolean",
                    "description": "If TRUE, signifies that this PolicyRule has one or more sub-rules. Sub-rules are used to enforce a hierarchical nesting of rules, so that parent rules may control the execution and other semantics of sub-rules that they contain."
                }
            }
        },
        "policyRuleBase": {
            "title": "policyRuleBase",
            "required": [
                "id",
                "link"
            ],
            "description": "The policyRuleBase realizes the event, condition, passaction, failaction semantics that form a policy rule. The semantics of this rule are that the rule is evaluated when an event occurs. If the condition clause is satisfied, then the pass-action clause will be executed, otherwise the fail-action clause will be executed.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for an policyRuleBase."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to an policyRuleBase resource."
                },
                "policyKeywords": {
                    "type": "string",
                    "description": "This defines a keywords that a policy administrator may use to assist in characterizing or categorizing a policy object to facilitate search operations."
                },
                "policyName": {
                    "type": "string",
                    "description": "This is a naming attribute that can be used to identify different policy entities."
                },
                "isManditoryEvaluation": {
                    "type": "boolean",
                    "description": "If TRUE, signifies that evaluation (and possibly action execution) of this entity is mandatory and must be attempted. If it is FALSE, then the evaluation of this entity is considered to be 'best effort' and may be ignored."
                },
                "policySetUsage": {
                    "type": "string",
                    "description": "This is a free-form string that recommends how this policy object should be used."
                },
                "isCNF": {
                    "type": "boolean",
                    "description": "If TRUE, defines the condition clause of this rule to be represented in Conjunctive Normal Form (e.g., an AND of ORs). If it is FALSE, then the condition clause will be represented in Disjunctive Normal Form (e.g., an OR of ANDs). This attribute controls the setting of how multiple condition clauses (as represented by multiple PolicyConditionComposite objects) are treated in the PolicyRule. As such, it is different from the attribute PolicyConditionComposite. IsCNF, which controls how multiple PolicyConditionAtomic objects are treated in a (single) PolicyConditionComposite object."
                },
                "hasSubRules": {
                    "type": "boolean",
                    "description": "If TRUE, signifies that this PolicyRule has one or more sub-rules. Sub-rules are used to enforce a hierarchical nesting of rules, so that parent rules may control the execution and other semantics of sub-rules that they contain."
                }
            }
        },
        "policySet": {
            "title": "policySet",
            "required": [
                "id",
                "link"
            ],
            "description": "PolicySet defines a common decision strategy and a common set of PolicyRoles to be used by the PolicyGroups and the PolicyRules that inherit from it.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for an policySet."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to an policySet resource."
                },
                "policyKeywords": {
                    "type": "string",
                    "description": "This defines a keywords that a policy administrator may use to assist in characterizing or categorizing a policy object to facilitate search operations."
                },
                "policyName": {
                    "type": "string",
                    "description": "This is a naming attribute that can be used to identify different policy entities."
                },
                "isManditoryEvaluation": {
                    "type": "boolean",
                    "description": "If TRUE, signifies that evaluation (and possibly action execution) of this entity is mandatory and must be attempted. If it is FALSE, then the evaluation of this entity is considered to be 'best effort' and may be ignored."
                },
                "policySetUsage": {
                    "type": "string",
                    "description": "This is a free-form string that recommends how this policy object should be used."
                }
            }
        },
        "postalContact": {
            "title": "postalContact",
            "required": [
                "propertyAddress",
                "objectType"
            ],
            "description": "A Property Address or Postal Delivery Address to use for the Contact.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "postalContact"
                    ],
                    "description": "The type of the object, postalContact."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the Contact Medium is valid for.."
                },
                "isPreferred": {
                    "type": "boolean",
                    "description": "Indicates that the ContactMedium is the preferred means of contact."
                },
                "type": {
                    "type": "string",
                    "description": "The type of contact medium E.g., Home, Work, Mobile (for telephone numbers)."
                },
                "postalDeliveryAddress": {
                    "$ref": "#/definitions/formattedPostalDeliveryAddress",
                    "description": "A PostalDeliveryAddress is an address that allows the delivery of mail."
                }
            }
        },
        "postalContactList": {
            "title": "postalContactList",
            "description": "This represents a list of postalContact resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the postalContact list."
                },
                "postalContacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/postalContact"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of postalContact."
                }
            }
        },
        "preference": {
            "title": "preference",
            "required": [
                "preferenceCategoryName"
            ],
            "description": "A Preference refers to a particular area of control, such as Parental Restriction or Email Marketing, for a particular Party Role.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for a Preference."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the preference resource."
                },
                "preferenceName": {
                    "type": "string",
                    "description": "A descriptive name for the Preference (e.g., Parental Restriction)."
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the Preference."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Preference is valid."
                },
                "preferenceSpecification": {
                    "$ref": "#/definitions/preferenceSpecification",
                    "description": "A Preference Specification is a template for a spceific instance of a Preference."
                },
                "preferenceCategoryName": {
                    "type": "string",
                    "description": "A descriptive name for the Preference Category."
                }
            }
        },
        "preferenceList": {
            "title": "preferenceList",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the list."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array for Preferences."
                }
            }
        },
        "preferenceSet": {
            "title": "preferenceSet",
            "required": [
                "preferenceCategoryName"
            ],
            "description": "A Preference set is a grouping of Preferences that can be reused",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for a Preference Set."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Preference Set resource."
                },
                "preferenceName": {
                    "type": "string",
                    "description": "A descriptive name for the Preference (e.g., Parental Restriction)."
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the Preference."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Preference is valid."
                },
                "preferenceSpecification": {
                    "$ref": "#/definitions/preferenceSpecification",
                    "description": "A Preference Specification is a template for a spceific instance of a Preference."
                },
                "preferenceCategoryName": {
                    "type": "string",
                    "description": "A descriptive name for the Preference Category."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preference items."
                }
            }
        },
        "preferenceSpecification": {
            "title": "preferenceSpecification",
            "required": [
                "preferenceSpecName"
            ],
            "description": "A Preference Specification is a template for a spceific instance of a Preference.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for a preferenceSpecification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the preferenceSpecification resource."
                },
                "preferenceSpecName": {
                    "type": "string",
                    "description": "A descriptive name for the PreferenceSpecification."
                },
                "description": {
                    "type": "string",
                    "description": "A short description for the PreferenceSpecification."
                }
            }
        },
        "presentation": {
            "title": "presentation",
            "required": [
                "presentationName",
                "presentationClassification",
                "presentationContentLocation"
            ],
            "description": "An element used to present something in a particular context. Examples of a PresentationElement are an html snippet for Web display, text used to describe a ?? in print, or an image used to represent ??.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for the Presentation Element."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Presentation resource."
                },
                "presentationName": {
                    "type": "string",
                    "description": "The name for this presentation."
                },
                "presentationCategories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presentationCategory"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Identifies the system (or controller) responsible for processing the user authentication."
                },
                "presentationClassification": {
                    "type": "string",
                    "enum": [
                        "Description",
                        "Icon",
                        "Image"
                    ],
                    "description": "The type of the presentation."
                },
                "presentationContentLocation": {
                    "type": "string",
                    "description": "The location (within a CMS) of the image, text, or document to be used for this presentation."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The timeframe in which the presentation is valid."
                }
            }
        },
        "presentationCategory": {
            "title": "presentationCategory",
            "required": [
                "presentationCategoryName",
                "presentationCategoryClassification"
            ],
            "description": "A presentation Category is a classification of presentations for a particular use. For example, Web presentations, print presentations, etc.",
            "type": "object",
            "properties": {
                "presentationCategoryName": {
                    "type": "string",
                    "description": "The name for the presentation category."
                },
                "description": {
                    "type": "string",
                    "description": "The description for the presentation category"
                },
                "presentationCategoryClassification": {
                    "type": "string",
                    "enum": [
                        "Web",
                        "Print",
                        "Script",
                        "Bill"
                    ],
                    "description": "An enumeration of types for a presentation category."
                }
            }
        },
        "presentationList": {
            "title": "presentationList",
            "description": "This represents a collection of Presentation resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Presentation collection."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presentation"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Presentation."
                }
            }
        },
        "product-create-update": {
            "title": "product-create-update",
            "required": [
                "id",
                "productName"
            ],
            "description": "A ProductOffering procured by a Customer, or other interested Party playing a PartyRole, appearing as a BusinessInteractionItem, which could take the form of a Agreement. ProductSpecificationCharacteristic(s) in part define the Product. A Product is realized as one or more Service(s) and/or Resource(s).",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product."
                },
                "productName": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the product is known and distinguished from other products."
                },
                "productDescription": {
                    "type": "string",
                    "description": "An explanation of what the product is."
                },
                "status": {
                    "$ref": "#/definitions/productStatusEnum",
                    "description": "The condition of the product, such as planned, designed, activated, disconnected."
                },
                "productSerialNumber": {
                    "type": "string",
                    "description": "A set of identifying characters and/or numbers assigned to, and usually marked on, each of a series of identical products."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period during which the product is applicable."
                },
                "productSpecification": {
                    "$ref": "#/definitions/productSpecificationRef",
                    "description": "Specification of the product."
                },
                "productOfferingRef": {
                    "$ref": "#/definitions/productOfferingRef",
                    "description": "Reference to the product offering."
                },
                "relatedProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productRelationship-create-update"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of product relationships."
                },
                "bundledProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/product-create-update"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of products."
                }
            }
        },
        "product": {
            "title": "product",
            "required": [
                "id",
                "productName"
            ],
            "description": "A Product Offering procured by a Customer, or other interested Party playing a PartyRole, appearing as a BusinessInteractionItem, which could take the form of a Agreement. ProductSpecificationCharacteristic(s) in part define the Product. A Product is realized as one or more Product(s) and/or Service(s) and/or Resource(s).",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this product resource."
                },
                "productName": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the product is known and distinguished from other products."
                },
                "productDescription": {
                    "type": "string",
                    "description": "An explanation of what the product is."
                },
                "status": {
                    "$ref": "#/definitions/productStatusEnum",
                    "description": "The condition of the product, such as planned, designed, activated, disconnected."
                },
                "productSerialNumber": {
                    "type": "string",
                    "description": "A set of identifying characters and/or numbers assigned to, and usually marked on, each of a series of identical products."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period during which the product is applicable."
                },
                "productSpecification": {
                    "$ref": "#/definitions/productSpecification",
                    "description": "Specification of the product."
                },
                "productOfferingRef": {
                    "$ref": "#/definitions/productOfferingRef",
                    "description": "Reference to the product offering."
                },
                "productPrices": {
                    "$ref": "#/definitions/productPrices",
                    "description": "A collection of productPrice for the product."
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/serviceRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of reference to the services."
                },
                "relatedProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productRelationship"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of product relationships."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preferences for the product."
                },
                "entitlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entitlement"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of entitilments for the product."
                },
                "bundledProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/product"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of products."
                }
            }
        },
        "productCategory": {
            "title": "productCategory",
            "required": [
                "productSpecClassificationName"
            ],
            "description": "A method used to group a set of ProductSpecifications that are classified together because of common characteristics. For example, 'wireline-telephony', or 'mobile phone accessory'.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the productCategory."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this productCategory resource."
                },
                "productSpecClassificationName": {
                    "type": "string",
                    "description": "The name of the product specification type."
                },
                "productSpecClassificationDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the product spec is."
                }
            }
        },
        "productLine": {
            "title": "productLine",
            "required": [
                "productSpecClassificationName"
            ],
            "description": "A method used to group related ProductSpecifications marketed by the same company. A line can comprise related prodcuts of various sizes, types, colors, qualities, or prices.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the productCategory."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this productCategory resource."
                },
                "productSpecClassificationName": {
                    "type": "string",
                    "description": "The name of the product specification type."
                },
                "productSpecClassificationDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the product spec is."
                }
            }
        },
        "productList": {
            "title": "productList",
            "description": "This represents a collection of product resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the product collection."
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/product"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of products."
                }
            }
        },
        "productOfferingRef": {
            "title": "productOfferingRef",
            "required": [
                "Id",
                "link"
            ],
            "description": "A reference to the product offering object.",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "A unique idetifier for a productOfferingRef."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the productOfferingRef resource."
                }
            }
        },
        "productOrder": {
            "title": "productOrder",
            "description": "A type of order that is not governed by any industry committee. Product Orders represent orders that would typically originate at an end user. Product Orders may spawn ASRs, LSRs, or other PSRs in order to fill the end users request, if facility, equipment, or plant assignments are not available for designing the requested Product.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a customerOrder."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the customerOrder resource."
                },
                "interactionStatus": {
                    "type": "string",
                    "description": "Status of the interaction."
                },
                "interactionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when interaction started."
                },
                "interactionDateComplete": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when interaction complete."
                },
                "interactionDescription": {
                    "type": "string",
                    "description": "A free form text for description of the interaction."
                },
                "assignedResponseDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The target response date assigned after review."
                },
                "purchaseOrderNumber": {
                    "type": "string",
                    "description": "A number that uniquely identifies a CustomerOrder within the ordering Customer's enterprise."
                },
                "assignedPriority": {
                    "type": "integer",
                    "description": "The order's assigned priority after review."
                },
                "orderDueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date upon which the CustomerOrder is due for completion."
                },
                "customerOrderClassification": {
                    "$ref": "#/definitions/customerOrderTypeEnum",
                    "description": "An enumeration for types of Customer Order."
                },
                "salesSource": {
                    "type": "string",
                    "description": "Identifies whether the sale was made as part of an external or internal sale (External, Internal)."
                },
                "businessInteractionRefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/businessInteractionRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Reference to the Business Interaction resource."
                },
                "customerOrderItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/customerOrderItem"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of customerOrderItem."
                }
            }
        },
        "productPrices": {
            "title": "productPrices",
            "description": "This represents a heterogeneious list of Product Price resources.",
            "type": "object",
            "properties": {
                "productPrices": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/genericProdPriceAlteration"
                            },
                            {
                                "$ref": "#/definitions/discountProdPriceAlteration"
                            },
                            {
                                "$ref": "#/definitions/allowanceProdPriceAlteration"
                            },
                            {
                                "$ref": "#/definitions/genericProdPriceCharge"
                            },
                            {
                                "$ref": "#/definitions/oneTimeChargeProdPriceCharge"
                            },
                            {
                                "$ref": "#/definitions/recurringChargeProdPriceCharge"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of productPrice for the product."
                }
            }
        },
        "productRef": {
            "title": "productRef",
            "required": [
                "id",
                "link"
            ],
            "description": "This represents product ref object.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a product."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the product resource."
                }
            }
        },
        "productRelationship-create-update": {
            "title": "productRelationship-create-update",
            "required": [
                "product1Id",
                "product2Id"
            ],
            "description": "A representation of a Product Relationship for creation and update.",
            "type": "object",
            "properties": {
                "product1Id": {
                    "type": "string",
                    "description": "An unique identifier for first product in the relationship."
                },
                "relationshipType": {
                    "type": "string",
                    "description": "The type of relationship: Replaced By, Required By, Works With, etc.."
                },
                "product2Id": {
                    "type": "string",
                    "description": "An unique identifier for second product in the relationship."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the relationship is valid for."
                }
            }
        },
        "productRelationship": {
            "title": "productRelationship",
            "required": [
                "product1",
                "product2"
            ],
            "description": "This association allows us to show direct relationships between Products. This should be used with care to ensure that the association reflects reality.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the productRelationship."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this productRelationship resource."
                },
                "product1": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/product"
                        },
                        {
                            "$ref": "#/definitions/loyaltyProgram"
                        }
                    ],
                    "description": "A related product. This represents the first product in relationship."
                },
                "relationshipType": {
                    "type": "string",
                    "description": "The type of relationship: Replaced By, Required By, Works With, etc.."
                },
                "product2": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/product"
                        },
                        {
                            "$ref": "#/definitions/loyaltyProgram"
                        }
                    ],
                    "description": "A related product. This represents the second product in relationship."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the relationship is valid for."
                }
            }
        },
        "productRelationshipList": {
            "title": "productRelationshipList",
            "description": "This represents a list of productRelationship resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the productRelationship list."
                },
                "productRelationships": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productRelationship"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of productRelationship."
                }
            }
        },
        "productServices": {
            "title": "productServices",
            "description": "Services assocaited with a product",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product services."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this product services resource."
                },
                "productSummary": {
                    "$ref": "#/definitions/productSummary",
                    "description": "summary properties for a the product"
                }
            }
        },
        "productSpecClassification": {
            "title": "productSpecClassification",
            "required": [
                "productSpecClassificationName"
            ],
            "description": "A classification that groups ProductSpecifications that share common characteristics. A ProductSpecification can be used to define a ProdOfferPricePolicyVariable (for example to discount a 'mobile phone accessory' with the purchase of a new wireless plan).",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the productSpecClassification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this productSpecClassification resource."
                },
                "productSpecClassificationName": {
                    "type": "string",
                    "description": "The name of the product specification type."
                },
                "productSpecClassificationDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the product spec is."
                }
            }
        },
        "productSpecRef": {
            "title": "productSpecRef",
            "required": [
                "id",
                "link"
            ],
            "description": "This represents product specification ref object.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a product specification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the productSpec resource."
                }
            }
        },
        "productSpecification-create-update": {
            "title": "productSpecification-create-update",
            "required": [
                "productSpecName"
            ],
            "description": "An representation of productSpecification used for creation and updation of productSpecification.",
            "type": "object",
            "properties": {
                "productSpecName": {
                    "type": "string",
                    "description": "The name of the product specification."
                },
                "productSpecDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the product spec is."
                },
                "productNumber": {
                    "type": "string",
                    "description": "An identification number assigned to uniquely identify the specification."
                },
                "brand": {
                    "type": "string",
                    "description": "The manufacturer or trademark of the specification."
                },
                "productSpecLifecycleStatus": {
                    "type": "string",
                    "description": "The condition of the product specification, such as active, inactive, planned."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the product specification is valid."
                },
                "productSpecClassifications": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/productSpecClassification"
                            },
                            {
                                "$ref": "#/definitions/productCategory"
                            },
                            {
                                "$ref": "#/definitions/productLine"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of productSpecClassfication for the productSpecification."
                },
                "productSpecifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productSpecification-create-update"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of productSpecification."
                }
            }
        },
        "productSpecification": {
            "title": "productSpecification",
            "required": [
                "id",
                "productSpecName"
            ],
            "description": "A detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to Customers or other Parties playing a PartyRole. A ProductSpecification may consist of other ProductSpecifications supplied together as a collection. Members of the collection may be offered in their own right. ProductSpecifications may also exist within groupings, such as ProductCategories, ProductLines, and ProductTypes.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product Specification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this product resource."
                },
                "productSpecName": {
                    "type": "string",
                    "description": "The name of the product specification."
                },
                "productSpecDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail what the product spec is."
                },
                "productNumber": {
                    "type": "string",
                    "description": "An identification number assigned to uniquely identify the specification."
                },
                "brand": {
                    "type": "string",
                    "description": "The manufacturer or trademark of the specification."
                },
                "productSpecLifecycleStatus": {
                    "type": "string",
                    "description": "The condition of the product specification, such as active, inactive, planned."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the product specification is valid."
                },
                "productSpecClassifications": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/productSpecClassification"
                            },
                            {
                                "$ref": "#/definitions/productCategory"
                            },
                            {
                                "$ref": "#/definitions/productLine"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of productSpecClassfication for the productSpecification."
                },
                "productSpecPresentations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presentation"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of presentations for the productSpecification."
                },
                "productSpecifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productSpecification"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of productSpecification."
                }
            }
        },
        "productSpecificationList": {
            "title": "productSpecificationList",
            "description": "This represents a collection of productSpecification resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the productSpecification collection."
                },
                "productSpecifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/productSpecification"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of productSpecifications."
                }
            }
        },
        "productSpecificationRef": {
            "title": "productSpecificationRef",
            "required": [
                "Id",
                "link"
            ],
            "description": "A reference to the productSpecification object.",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "string",
                    "description": "A unique idetifier for a productSpecificationRef."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the productSpecificationRef resource."
                }
            }
        },
        "productStatusEnum": {
            "title": "productStatusEnum",
            "description": "Product Status.",
            "type": "string",
            "enum": [
                "Planned",
                "Designed",
                "Acivated",
                "Disconnected"
            ]
        },
        "productSummary": {
            "title": "productSummary",
            "required": [
                "id",
                "link",
                "objectType"
            ],
            "description": "A summary view of the product.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "productSummary"
                    ],
                    "description": "The type of the object, productSummary."
                },
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the product."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this product resource."
                },
                "productName": {
                    "type": "string",
                    "description": "A word, term, or phrase by which the product is known and distinguished from other products."
                },
                "productDescription": {
                    "type": "string",
                    "description": "An explanation of what the product is."
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Planned",
                        "Designed",
                        "Acivated",
                        "Disconnected"
                    ],
                    "description": "The condition of the product, such as planned, designed, activated, disconnected."
                },
                "productSerialNumber": {
                    "type": "string",
                    "description": "A set of identifying characters and/or numbers assigned to, and usually marked on, each of a series of identical products."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period during which the product is applicable."
                }
            }
        },
        "property-create-update": {
            "title": "property-create-update",
            "description": "A piece of land with defined legal boundaries.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for property."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this Property resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "lotNr": {
                    "type": "string",
                    "description": "A number of the specific land lot."
                },
                "landUse": {
                    "type": "string",
                    "description": "A series of operations on land, carried out by humans, with the intention to obtain products and/or benefits through using land resources [Land Use Database]."
                },
                "landCover": {
                    "type": "string",
                    "description": "The vegetation (natural or planted) or man made constructions (buildings, etc.) which occur on the earth surface. Water, ice, bare rock, sand and similar surfaces also count as land cover [Land Use Database]."
                },
                "propertyElevation": {
                    "$ref": "#/definitions/quantity",
                    "description": "The height above sea level, in the indicated units."
                },
                "propertyName": {
                    "type": "string",
                    "description": "The property name, if it exists."
                },
                "naturalRisks": {
                    "type": "string",
                    "description": "List of natural disaster risks, such as earthquake zone or area prone to floods, blizzards, avalanches, hurricanes or tornadoes. At this time no processing is envisioned for naturalRisks, thus it is expected to remain an unformatted string listing the risks, rather than creating enumerations or subclasses."
                }
            }
        },
        "property": {
            "title": "property",
            "required": [
                "objectType"
            ],
            "description": "A piece of land with defined legal boundaries.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "property"
                    ],
                    "description": "The type of the object, property."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for property."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this Property resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "lotNr": {
                    "type": "string",
                    "description": "A number of the specific land lot."
                },
                "landUse": {
                    "type": "string",
                    "description": "A series of operations on land, carried out by humans, with the intention to obtain products and/or benefits through using land resources [Land Use Database]."
                },
                "landCover": {
                    "type": "string",
                    "description": "The vegetation (natural or planted) or man made constructions (buildings, etc.) which occur on the earth surface. Water, ice, bare rock, sand and similar surfaces also count as land cover [Land Use Database]."
                },
                "propertyElevation": {
                    "$ref": "#/definitions/quantity",
                    "description": "The height above sea level, in the indicated units."
                },
                "propertyName": {
                    "type": "string",
                    "description": "The property name, if it exists."
                },
                "naturalRisks": {
                    "type": "string",
                    "description": "List of natural disaster risks, such as earthquake zone or area prone to floods, blizzards, avalanches, hurricanes or tornadoes. At this time no processing is envisioned for naturalRisks, thus it is expected to remain an unformatted string listing the risks, rather than creating enumerations or subclasses."
                }
            }
        },
        "propertyAddress-create-update": {
            "title": "propertyAddress-create-update",
            "description": "A full representation of a property address, as well as geocoding reference for the property. This schema should used for CREATE and UPDATE operations.",
            "type": "object",
            "properties": {
                "streetNr": {
                    "type": "string",
                    "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses."
                },
                "streetNrSuffix": {
                    "type": "string",
                    "description": "The first street number suffix."
                },
                "streetNrLast": {
                    "type": "string",
                    "description": "Last number in a range of street numbers allocated to a property."
                },
                "streetNrLastSuffix": {
                    "type": "string",
                    "description": "Last street number suffix for a ranged address."
                },
                "streetName": {
                    "type": "string",
                    "description": "Name of the street or other street type."
                },
                "subUnitType": {
                    "type": "string",
                    "description": "The type of subunit (e.g., Flat, Suite, Tower, Unit)."
                },
                "subUnitNr": {
                    "type": "string",
                    "description": "The discriminator used for the subunit, often just a sumple number but may also be a range."
                },
                "levelType": {
                    "type": "string",
                    "description": "Describes level types within a building (e.g., Floor)."
                },
                "levelNr": {
                    "type": "string",
                    "description": "Used where a level type may be repeated (e.g., BASEMENT 1, BASEMENT 2)."
                },
                "buildingName": {
                    "type": "string",
                    "description": "Allows for buildings with well-known names to be used in an address."
                },
                "privateStreetName": {
                    "type": "string",
                    "description": "Private streets internal to a property (e.g., a university) with an internal name not recorded by the land title office."
                },
                "locality": {
                    "type": "string",
                    "description": "A bounded locality within a city, town or shire principally of urban character."
                },
                "city": {
                    "type": "string",
                    "description": "City that the address is in."
                },
                "stateOrProvince": {
                    "type": "string",
                    "description": "The state or province that the address is in."
                },
                "country": {
                    "type": "string",
                    "description": "The country that the address is in."
                },
                "postcode": {
                    "type": "string",
                    "description": "A descriptor for a postal delivery area, used to speed and simplify the delivery of mail. For US addresses, only the first five digits without extension."
                },
                "postcodeExtension": {
                    "type": "string",
                    "description": "The four-digit extension on postal code, what comes after the hyphen specified."
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude of the point."
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude of the point."
                },
                "geographicDatum": {
                    "type": "string",
                    "description": "Geocoding Referential."
                }
            }
        },
        "propertyAddress": {
            "title": "propertyAddress",
            "required": [
                "id",
                "link"
            ],

            "description": "A full representation of a property address, as well as geocoding reference for the property.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for Address."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Property Address resource."
                },
                "streetNr": {
                    "type": "string",
                    "description": "Number identifying a specific property on a public street. It may be combined with streetNrLast for ranged addresses."
                },
                "streetNrSuffix": {
                    "type": "string",
                    "description": "The first street number suffix."
                },
                "streetNrLast": {
                    "type": "string",
                    "description": "Last number in a range of street numbers allocated to a property."
                },
                "streetNrLastSuffix": {
                    "type": "string",
                    "description": "Last street number suffix for a ranged address."
                },
                "streetName": {
                    "type": "string",
                    "description": "Name of the street or other street type."
                },
                "subUnitType": {
                    "type": "string",
                    "description": "The type of subunit (e.g., Flat, Suite, Tower, Unit)."
                },
                "subUnitNr": {
                    "type": "string",
                    "description": "The discriminator used for the subunit, often just a sumple number but may also be a range."
                },
                "levelType": {
                    "type": "string",
                    "description": "Describes level types within a building (e.g., Floor)."
                },
                "levelNr": {
                    "type": "string",
                    "description": "Used where a level type may be repeated (e.g., BASEMENT 1, BASEMENT 2)."
                },
                "buildingName": {
                    "type": "string",
                    "description": "Allows for buildings with well-known names to be used in an address."
                },
                "privateStreetName": {
                    "type": "string",
                    "description": "Private streets internal to a property (e.g., a university) with an internal name not recorded by the land title office."
                },
                "locality": {
                    "type": "string",
                    "description": "A bounded locality within a city, town or shire principally of urban character."
                },
                "city": {
                    "type": "string",
                    "description": "City that the address is in."
                },
                "stateOrProvince": {
                    "type": "string",
                    "description": "The state or province that the address is in."
                },
                "country": {
                    "type": "string",
                    "description": "The country that the address is in."
                },
                "postcode": {
                    "type": "string",
                    "description": "A descriptor for a postal delivery area, used to speed and simplify the delivery of mail. For US addresses, only the first five digits without extension."
                },
                "postcodeExtension": {
                    "type": "string",
                    "description": "The four-digit extension on postal code, what comes after the hyphen specified."
                },
                "latitude": {
                    "type": "string",
                    "description": "Latitude of the point."
                },
                "longitude": {
                    "type": "string",
                    "description": "Longitude of the point."
                },
                "geographicDatum": {
                    "type": "string",
                    "description": "Geocoding Referential."
                }
            }
        },
        "propertyAddressReference": {
            "title": "propertyAddressReference",
            "required": [
                "objectType",
                "id",
                "link"
            ],

            "description": "Specifies a property address by reference.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "propertyAddressReference"
                    ],
                    "description": "A reference to a property address by id."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for the address."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the property address."
                }
            }
        },
        "propertyList": {
            "title": "propertyList",
            "description": "This represents a list of property resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the property list."
                },
                "properties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/property"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of property."
                }
            }
        },
        "provincialIdentification": {
            "title": "provincialIdentification",
            "required": [
                "provincialIdNumber",
                "objectType"
            ],
            "description": "Represents a provincial id form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "provincialIdentification"
                    ],
                    "description": "The type of the object, provincialIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "provincialIdNumber": {
                    "type": "string",
                    "description": "Provincial ID number."
                }
            }
        },
        "quantity": {
            "title": "quantity",
            "required": [
                "amount",
                "units"
            ],
            "description": "A base / value business entity used to represent measurements.",
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "description": "A positive floating point number representing the amount of the quantity."
                },
                "units": {
                    "type": "string",
                    "description": "The unit of measure for the quantity, such as meters, cubic yards, kilograms."
                }
            }
        },
        "rateCenter-create-update": {
            "title": "rateCenter-create-update",
            "required": [
                "rateCenterCode"
            ],
            "description": "Rate Centers are used to define specified geopraphical locations for rating purposes. For example, telephone calls wihtin a rateCenter may be free, or a specific point associated with the rateCenter may be used for distance calculations.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for rateCenter."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this rateCenter resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "rateCenterName": {
                    "type": "string",
                    "description": "The name of the rate center."
                },
                "rateCenterCode": {
                    "type": "string",
                    "description": "A code that identifies the rate center."
                }
            }
        },
        "rateCenter": {
            "title": "rateCenter",
            "required": [
                "rateCenterCode",
                "objectType"
            ],
            "description": "Rate Centers are used to define specified geopraphical locations for rating purposes. For example, telephone calls wihtin a rateCenter may be free, or a specific point associated with the rateCenter may be used for distance calculations.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "rateCenter"
                    ],
                    "description": "The type of the object, rateCenter."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for rateCenter."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this rateCenter resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "rateCenterName": {
                    "type": "string",
                    "description": "The name of the rate center."
                },
                "rateCenterCode": {
                    "type": "string",
                    "description": "A code that identifies the rate center."
                }
            }
        },
        "rateCenterList": {
            "title": "rateCenterList",
            "description": "This represents a list of rateCenter resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the rateCenter list."
                },
                "rateCenters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rateCenter"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of rateCenter."
                }
            }
        },
        "rateGroupRegion-create-update": {
            "title": "rateGroupRegion-create-update",
            "required": [
                "rateGroupRegionName"
            ],
            "description": "A RateGroupRegion is used to influence rates. Rates in one RateGroupRegion may be different from rates in another RateGroupRegion.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for rateGroupRegion."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this rateGroupRegion resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "rateGroupRegionName": {
                    "type": "string",
                    "description": "The name of the rate group region."
                },
                "rateGroup": {
                    "type": "string",
                    "description": "Defines a value that is used to determine rates. Assigning the same rateGroup to several RateGroupRegions allows for different RateGroupRegions to be rated the same. For example, RateGroupRegions that have a similar number of phone line that are included in 'local' calling may have the same rateGroup. That way, the cost of local calling can be varied uniformly based upon the number of lines that are local."
                }
            }
        },
        "rateGroupRegion": {
            "title": "rateGroupRegion",
            "required": [
                "rateGroupRegionName",
                "objectType"
            ],
            "description": "A RateGroupRegion is used to influence rates. Rates in one RateGroupRegion may be different from rates in another RateGroupRegion.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "rateGroupRegion"
                    ],
                    "description": "The type of the object, rateGroupRegion."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for rateGroupRegion."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this rateGroupRegion resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "rateGroupRegionName": {
                    "type": "string",
                    "description": "The name of the rate group region."
                },
                "rateGroup": {
                    "type": "string",
                    "description": "Defines a value that is used to determine rates. Assigning the same rateGroup to several RateGroupRegions allows for different RateGroupRegions to be rated the same. For example, RateGroupRegions that have a similar number of phone line that are included in 'local' calling may have the same rateGroup. That way, the cost of local calling can be varied uniformly based upon the number of lines that are local."
                }
            }
        },
        "rateGroupRegionList": {
            "title": "rateGroupRegionList",
            "description": "This represents a list of rateGroupRegion resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the rateGroupRegion list."
                },
                "rateGroupRegions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/rateGroupRegion"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of rateGroupRegion."
                }
            }
        },
        "recurringAppliedCustomerBillingProductCharge": {
            "title": "recurringAppliedCustomerBillingProductCharge",
            "required": [
                "creationDate",
                "rateAmount",
                "recurringChargeFromDate",
                "recurringChargeThroughDate"
            ],
            "description": "A recurring charge or a credit assigned to the customers account in the course for the purpose of the billing process.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the recurringAppliedCustomerBillingProductCharge."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the recurringAppliedCustomerBillingProductCharge resource."
                },
                "billingRateId": {
                    "type": "string",
                    "description": "Unique identifier for the billing rate."
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "A date of creation."
                },
                "rateAmount": {
                    "$ref": "#/definitions/money",
                    "description": "A unit (for example, US Dollars) and number of the applied rate."
                },
                "billingRateCode": {
                    "type": "string",
                    "description": "Used to capture the code that represent the bill charge type (common to many billing systems)."
                },
                "rateDescription": {
                    "type": "string",
                    "description": "A textual description."
                },
                "recurringChargeFromDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date from when recurring charge started."
                },
                "recurringChargeThroughDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date till recurring charge applied."
                }
            }
        },
        "recurringChargeProdPriceCharge": {
            "title": "recurringChargeProdPriceCharge",
            "required": [
                "price",
                "priceClassification",
                "recurringChargePeriod"
            ],
            "description": "A charge that is levied repeatedly. It has a period, such as monthly, quarterly, or yearly. An example would be a montly charge for long distance.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the recurringChargeProdPriceCharge."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this recurringChargeProdPriceCharge resource."
                },
                "productPriceName": {
                    "type": "string",
                    "description": "A short decriptive name such as 'affinity discount'."
                },
                "productPriceDescription": {
                    "type": "string",
                    "description": "A narrative that explains in detail the semantics of this component."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The period for which the price is valid."
                },
                "quantity": {
                    "$ref": "#/definitions/quantity",
                    "description": "Quantity of an interaction item involved in an interaction."
                },
                "price": {
                    "$ref": "#/definitions/money",
                    "description": "The amount of money that characterizes the price."
                },
                "priceClassification": {
                    "type": "string",
                    "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
                },
                "recurringChargePeriod": {
                    "type": "string",
                    "description": "The frequency for which a Customer is charged the price. For example, weekly, monthly, quarterly, yearly."
                },
                "composedOfProdPrices": {
                    "$ref": "#/definitions/productPrices",
                    "description": "Product Prices that this Price may be composed of"
                }
            }
        },
        "refundTypeEnum": {
            "title": "refundTypeEnum",
            "description": "An enumeration of types of refund.",
            "type": "string",
            "enum": [
                "Cash",
                "Credit Card"
            ]
        },
        "serviceArea": {
            "title": "serviceArea",
            "required": [
                "objectType"
            ],
            "description": "An area in which service is available by virtue of proximity to service delivering infrastructure, Examples of Service Areas include Digital Radio Concentrator Systems (DRCS), Fixed Radio Access (FRA) service areas and Cable service areas. For wireless service areas (e.g. WiFi, 3G mobile), it may be useful to model the signal strength contours as a collection of areas.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "serviceArea"
                    ],
                    "description": "The type of the object, serviceArea."
                },
                "area": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/genericServiceArea"
                        }
                    ],
                    "description": "A concrete Service Area."
                }
            }
        },
        "serviceAreaList": {
            "title": "serviceAreaList",
            "description": "This represents a list of serviceArea resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Service Area list."
                },
                "serviceAreas": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/genericServiceArea"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Service Area."
                }
            }
        },
        "serviceOrder": {
            "title": "serviceOrder",
            "description": "A type of request that represents a Customer Order's products decomposed into the services through which the products are realized.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a serviceOrder."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the serviceOrder resource."
                },
                "interactionStatus": {
                    "type": "string",
                    "description": "Status of the interaction."
                },
                "interactionDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when interaction started."
                },
                "interactionDateComplete": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date when interaction complete."
                },
                "interactionDescription": {
                    "type": "string",
                    "description": "A free form text for description of the interaction."
                },
                "businessInteractionRefs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/businessInteractionRef"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Reference to the Business Interaction resource."
                },
                "serviceOrderItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/serviceOrderItem"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of serviceOrderItem."
                }
            }
        },
        "serviceOrderItem": {
            "title": "serviceOrderItem",
            "description": "The purpose for the ServiceOrder expressed in terms of a ServiceSpecification or a Service.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Distinguishes different instances of serviceOrderItems on this Service Order."
                },
                "quantity": {
                    "$ref": "#/definitions/quantity",
                    "description": "Quantity of a serviceOrderItem involved in an interaction."
                },
                "action": {
                    "type": "string",
                    "description": "The action to take for an serviceOrderItem, such as add, change, remove."
                },
                "status": {
                    "type": "string",
                    "description": "The current condition of an serviceOrder item, such as not started, in progress, completed."
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/formattedPropertyAddress"
                            },
                            {
                                "$ref": "#/definitions/propertyAddressReference"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A location involved in an ineration. For examle, John R home address is the location where an ordered Product will be installed."
                }
            }
        },
        "servicePreferences": {
            "title": "servicePreferences",
            "description": "The preferences associated with a service.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unambiguously distinguishes different object instances. It is the naming attribute of the object."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the servicePreference resource."
                },
                "commonName": {
                    "type": "string",
                    "description": "Represents a user-friendly identifier of an object. It is a (possibly ambiguous) name by which the object is commonly known in some limited scope (such as an organization) and conforms to the naming conventions of the country or culture with which it is associated. It is NOT used as a naming attribute (i.e., to uniquely identify an instance of the object)."
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service."
                },
                "isServiceEnabled": {
                    "type": "boolean",
                    "description": "This is a Boolean attribute that, if TRUE, signifies that this Service has been enabled for use. If the value of this attribute is FALSE, then this means that this particular Service has NOT been enabled for use."
                },
                "hasStarted": {
                    "type": "boolean",
                    "description": "This is a Boolean attribute that, if TRUE, signifies that this Service has already been started. If the value of this attribute is FALSE, then this signifies that this Service has NOT been Started."
                },
                "isMandatory": {
                    "type": "boolean",
                    "description": "This is a Boolean attribute that, if TRUE, signifies that this Service is mandatory (i.e., this Service must be running when the managed environment is in a non-failed state). If the value of this attribute is FALSE, then this means that this Service is not required to run."
                },
                "startMode": {
                    "$ref": "#/definitions/serviceStartModeEnum",
                    "description": "An enumeration integer that indicates how the Service is started."
                },
                "isStateful": {
                    "type": "boolean",
                    "description": "This is a Boolean attribute that, if TRUE, means that this Service can be changed without affecting any other services."
                },
                "isFCCReportable": {
                    "type": "boolean",
                    "description": "Indicates whether the service is FCC Reportable."
                },
                "isTSP": {
                    "type": "boolean",
                    "description": "Indicates whether a service is designated as 'TSP' (Telecommunication Service Provider). This indicator is used to prioritize interaction with this service as TSP services generally require a higher service level."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/preference"
                            },
                            {
                                "$ref": "#/definitions/preferenceSet"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of Preferences."
                }
            }
        },
        "serviceRef": {
            "title": "serviceRef",
            "required": [
                "id",
                "link"
            ],
            "description": "This represents service ref object.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a service."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to a Service resource."
                }
            }
        },
        "serviceSite-create-update": {
            "title": "serviceSite-create-update",
            "required": [
                "propertyAddress"
            ],
            "description": "A representation of a serviceSite. This schema is used only for creating and updating a serviceSite.",
            "properties": {
                "accuracy": {
                    "type": "string",
                    "description": "This attribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +-20 meters)."
                },
                "name": {
                    "type": "string",
                    "description": "The name that a GeographicSite is known by."
                },
                "code": {
                    "type": "string",
                    "description": "A code that may be used for some addressing schemes e.g. [ANSI T1.253-1999]. This code should adhere to the Telcordia Common Language Location Identifier (CLLI) code standard."
                },
                "status": {
                    "type": "string",
                    "description": "The status of the GeographicSite."
                },
                "description": {
                    "type": "string",
                    "description": "Describes the site in arbitrary ways - location, type of site, purpose, size, distance from landmarks, etc."
                },
                "propertyAddress": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/formattedPropertyAddress"
                        },
                        {
                            "$ref": "#/definitions/propertyAddressReference"
                        }
                    ],
                    "description": "The property address for the site. The address may be identified by either an address (description), an address reference or a geoCode."
                }
            }
        },
        "serviceSite": {
            "title": "serviceSite",
            "required": [
                "id",
                "propertyAddress"
            ],
            "description": "ServiceSite is a customer location where a customer is receiving service. It is the point at which service is delivered to a customer, and is associated with a service address (UrbanPropertyAddress).",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for serviceSite."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to this serviceSite Address resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +-20 meters)."
                },
                "name": {
                    "type": "string",
                    "description": "The name that a GeographicSite is known by."
                },
                "code": {
                    "type": "string",
                    "description": "A code that may be used for some addressing schemes e.g. [ANSI T1.253-1999]. This code should adhere to the Telcordia Common Language Location Identifier (CLLI) code standard."
                },
                "status": {
                    "type": "string",
                    "description": "The status of the GeographicSite."
                },
                "description": {
                    "type": "string",
                    "description": "Describes the site in arbitrary ways - location, type of site, purpose, size, distance from landmarks, etc."
                },
                "propertyAddress": {
                    "oneOf": [
                        {
                            "$ref": "#/definitions/formattedPropertyAddress"
                        },
                        {
                            "$ref": "#/definitions/propertyAddressReference"
                        }
                    ],
                    "description": "The property address for the site. The address may be identified by either an address (description), an address reference or a geoCode."
                }
            }
        },
        "serviceSiteList": {
            "title": "serviceSiteList",
            "description": "This represents a collection of Service Site resource.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this collection."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this collection."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Service Site collection."
                },
                "serviceSites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/serviceSite"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Service Site."
                }
            }
        },
        "serviceSpecClassification": {
            "title": "serviceSpecClassification",
            "required": [
                "serviceSpecClassificationName"
            ],
            "description": "Defines a generic category of ServiceSpecifications. Each ServiceSpecClassification type serves to group a set of particular ServiceSpecifications that share the same behavior and other semantics. One result of this is to be able to more efficiently define a set of related Services that can be grouped together to form a higher-level Service. For example, a given higher-level Service might include VPN and QoS Services. If these Services are always used together, then they can be categorized using a common type.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique identifier for the classification."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the serviceSpecClassification resource."
                },
                "serviceSpecClassificationName": {
                    "type": "string",
                    "description": "A short set of text readable characters to identify the kind of service, e.g. IPTV, VoIP, IMS."
                },
                "description": {
                    "type": "string",
                    "description": "A short description of the calssification."
                },
                "serviceSpecClassificationVersion": {
                    "type": "string",
                    "description": "Identifies the version of the classification."
                }
            }
        },
        "serviceStartModeEnum": {
            "title": "serviceStartModeEnum",
            "description": "Service Start Modes",
            "type": "string",
            "enum": [
                "Unknown",
                "Automatically By Managed Environment",
                "Automatically By Owning Device",
                "Manually By Service Provider",
                "Manually By Customer",
                "Any Of Above"
            ]
        },
        "serviceStatusEnum": {
            "title": "serviceStatusEnum",
            "description": "The status of a Service",
            "type": "string",
            "enum": [
                "Operational And Billable",
                "Degraded But Billable",
                "In Violation And Billable",
                "Operational But Not Billable",
                "In Test And Not Billable",
                "Being Deployed And Not Billable",
                "Failed"
            ]
        },
        "socialInsuranceIdentification": {
            "title": "socialInsuranceIdentification",
            "required": [
                "socialInsuranceNumber",
                "objectType"
            ],
            "description": "Represents a social insurance form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "socialInsuranceIdentification"
                    ],
                    "description": "The type of the object, socialInsuranceIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "socialInsuranceNumber": {
                    "type": "string",
                    "description": "Social insurance ID number."
                }
            }
        },
        "socialSecurityIdentification": {
            "title": "socialSecurityIdentification",
            "required": [
                "socialSecurityNumber",
                "objectType"
            ],
            "description": "Represents a U.S. social security form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "socialSecurityIdentification"
                    ],
                    "description": "The type of the object, socialSecurityIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "socialSecurityNumber": {
                    "type": "string",
                    "description": "Social security ID number."
                }
            }
        },
        "state-create-update": {
            "title": "state-create-update",
            "required": [
                "name"
            ],
            "description": "This is an example of a concrete Geographic Location entity. It can be used to represent States and their equivalents.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for state."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this state resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "name": {
                    "type": "string",
                    "description": "The standard State name."
                },
                "code": {
                    "type": "string",
                    "description": "abbreviation for the name e.g. SA, NT, WA, QLD, NSW, VIC, TAS."
                },
                "type": {
                    "type": "string",
                    "description": "The type of state."
                }
            }
        },
        "state": {
            "title": "state",
            "required": [
                "name",
                "objectType"
            ],
            "description": "This is an example of a concrete Geographic Location entity. It can be used to represent States and their equivalents.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "state"
                    ],
                    "description": "The type of the object, state."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for state."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this state resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "name": {
                    "type": "string",
                    "description": "The standard State name."
                },
                "code": {
                    "type": "string",
                    "description": "abbreviation for the name e.g. SA, NT, WA, QLD, NSW, VIC, TAS."
                },
                "type": {
                    "type": "string",
                    "description": "The type of state."
                }
            }
        },
        "stateIdentification": {
            "title": "stateIdentification",
            "required": [
                "stateIdNumber",
                "objectType"
            ],
            "description": "Represents a state id form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "stateIdentification"
                    ],
                    "description": "The type of the object, stateIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "stateIdNumber": {
                    "type": "string",
                    "description": "State ID number"
                }
            }
        },
        "stateList": {
            "title": "stateList",
            "description": "This represents a list of state resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the state list."
                },
                "states": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/state"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of state."
                }
            }
        },
        "streetName": {
            "title": "streetName",
            "required": [
                "name",
                "streetType"
            ],
            "description": "A word, term, or phrase by which a Street is known and distinguished from other Streets.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for streetName."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this streetName resource."
                },
                "name": {
                    "type": "string",
                    "description": "Name of the street without qualifiers."
                },
                "streetType": {
                    "type": "string",
                    "description": "The type of street (e.g., Street, St., Road, Rd., Alley)."
                },
                "nameType": {
                    "type": "string",
                    "description": "Identifies the type of street name (e.g. alternate, former, etc.)."
                }
            }
        },
        "streetSegment-create-update": {
            "title": "streetSegment-create-update",
            "description": "Defines a contiguous section of a Street.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for streetSegment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this streetSegment resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "suburb": {
                    "type": "string",
                    "description": "Name of a metropolitan suburban area."
                },
                "street": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/streetName"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of street name."
                }
            }
        },
        "streetSegment": {
            "title": "streetSegment",
            "required": [
                "objectType"
            ],
            "description": "Defines a contiguous section of a Street.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "streetSegment"
                    ],
                    "description": "The type of the object, streetSegment."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for streetSegment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this streetSegment resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "suburb": {
                    "type": "string",
                    "description": "Name of a metropolitan suburban area."
                },
                "street": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/streetName"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of street name."
                }
            }
        },
        "streetSegmentList": {
            "title": "streetSegmentList",
            "description": "This represents a list of streetSegment resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the streetSegment list."
                },
                "streetSegments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/streetSegment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of streetSegment."
                }
            }
        },
        "studentIdentification": {
            "title": "studentIdentification",
            "required": [
                "studentIdNumber",
                "objectType"
            ],
            "description": "Represents a student id form of id for an individual.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "studentIdentification"
                    ],
                    "description": "The type of the object, studentIdentification."
                },
                "issueDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date that the identification was produced or printed."
                },
                "scannedDocumentLocation": {
                    "type": "string",
                    "description": "A link to the scan of the identification paper."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the Party Identification is valid."
                },
                "issuingOrganization": {
                    "$ref": "#/definitions/organizationSummary",
                    "description": "The issuer of the identification."
                },
                "studentIdNumber": {
                    "type": "string",
                    "description": "Student ID number."
                }
            }
        },
        "thirdPartyPM": {
            "title": "thirdPartyPM",
            "required": [
                "thirdPartyType",
                "thirdPartyId",
                "objectType"
            ],
            "description": "Payment Method used for payments via authorized Third Parties. thirdPartyPM is an example of payment method, using which payment can be made through the third party such as bank.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "thirdPartyPM"
                    ],
                    "description": "The type of the object, thirdPartyPM."
                },
                "id": {
                    "type": "string",
                    "description": "An unique identifier for the thirdPartyPM."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the thirdPartyPM resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of a particular payment method."
                },
                "thirdPartyType": {
                    "type": "string",
                    "description": "A classification of the third party which collects the money for service provider."
                },
                "thirdPartyId": {
                    "type": "string",
                    "description": "The unique identifier for the third party which collects the money for service provider."
                },
                "merchantId": {
                    "type": "string",
                    "description": "An identifier of the merchant that is known to the third party payment processor in order to allow customers to make payments to the identified merchant through the third party."
                }
            }
        },
        "ticket": {
            "title": "ticket",
            "description": "A record containing the details of a Ticket. Each Ticket docuemnts the lifecycle of a single Ticket.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a ticket."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the ticket resource."
                },
                "ticketAssignmentSummary": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/assignmentEntry"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Summary of assignment details for a ticket."
                },
                "ticketCategorizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ticketCategory"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of ticket category."
                },
                "ticketContacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/contact"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of contact assigned to ticket."
                },
                "ticketExtendedProperties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/extendedProperty"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of extendedProperty."
                },
                "ticketLocationSummmary": {
                    "$ref": "#/definitions/locationSummary",
                    "description": "Summary of the location for an interaction."
                },
                "originatingSystem": {
                    "type": "string",
                    "description": "The source of origin for the ticket (E.g. Call Center, Email, etc.) or the business partner in an e-bonding situation."
                },
                "originatingTicketId": {
                    "type": "string",
                    "description": "The ticketId provided by an originatingSystem."
                },
                "ticketCreateDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The date and time that the Ticket record was created."
                },
                "ticketSubmitter": {
                    "type": "string",
                    "description": "The info of the submitter of the Ticket."
                },
                "ticketClassification": {
                    "type": "string",
                    "description": "A classifier for the Ticket type (i.e. Problem, Incident)."
                },
                "ticketDescription": {
                    "type": "string",
                    "description": "A narrative that provides short summary of the Ticket."
                },
                "ticketDetailDescription": {
                    "type": "string",
                    "description": "The detail description of the Ticket that expands on the summary information provided in the description."
                },
                "ticketImpact": {
                    "type": "string",
                    "description": "The impact of the Ticket."
                },
                "ticketSeverity": {
                    "$ref": "#/definitions/ticketSeverityEnum",
                    "description": "The level of impact prioritization of the Ticket (e.g. high, medium, low)."
                },
                "ticketStatus": {
                    "type": "string",
                    "description": "The status of a Ticket."
                },
                "universalId": {
                    "type": "string",
                    "description": "A globally unique identifier used to identify the ticket across the enterprise or between enterprises (i.e. UUID, GUID)."
                },
                "worklogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/workLogEntry"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Diary of work activity of a Ticket."
                }
            }
        },
        "ticketCategory": {
            "title": "ticketCategory",
            "required": [
                "assignee"
            ],
            "description": "A category of Ticket.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a ticketCategory."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the ticketCategory resource."
                },
                "categoryDescription": {
                    "type": "string",
                    "description": "A description of the ticketCategory."
                },
                "categoryLevel": {
                    "type": "string",
                    "description": "The category level for the ticket; you can have n-levels of categorization."
                },
                "categoryValue": {
                    "type": "string",
                    "description": "The category value for the ticket; you can have multiple possible values for each category."
                },
                "ticketCategories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ticketCategory"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "Each ticketCategory may be composed of one or more ticketCategories. Each ticketCategory may be part of one or more ticketCategories."
                }
            }
        },
        "ticketSeverityEnum": {
            "title": "ticketSeverityEnum",
            "description": "The enumeration type of severity of a Ticket.",
            "type": "string",
            "enum": [
                "High",
                "Medium",
                "Low"
            ]
        },
        "timePeriod": {
            "title": "timePeriod",
            "required": [
                "startDateTime"
            ],
            "description": "A base / value business entity used to represent a period of time, between two timepoints.",
            "type": "object",
            "properties": {
                "startDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The start date and time."
                },
                "endDateTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The end date and time."
                }
            }
        },
        "timeZone": {
            "title": "timeZone",
            "required": [
                "name",
                "timeZoneRule"
            ],
            "description": "A time zone is any national region where local clocks agree. Each of the time zones defined may document multiple offsets from UTC (via the associated TimeZoneRule(s)), typically including both standard time and daylight saving time.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for timeZone."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this timeZone resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the TimeZone. A time zone name generally takes the form of 'Area/Location', where Area is the name of a continent, an ocean, or Etc, and the Location is usually the name of a city or island within the Area. Examples include America/New_York, Europe/Paris, Etc/UTC."
                },
                "comment": {
                    "type": "string",
                    "description": "A comment that describes the TimeZone."
                },
                "timezoneUrl": {
                    "type": "string",
                    "description": "A URL to a resource that provides additional information about the TimeZone."
                },
                "timeZoneRule": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/timeZoneRule"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of TimeZone Rule."
                }
            }
        },
        "timeZoneList": {
            "title": "timeZoneList",
            "description": "This represents a list of timeZone resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the timeZone list."
                },
                "timeZones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/timeZone"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of timeZone."
                }
            }
        },
        "timeZoneRegion-create-update": {
            "title": "timeZoneRegion-create-update",
            "required": [
                "timeZoneName"
            ],
            "description": "A representation of a Time Zone Region. This schema is used only for creating and updating a Time Zone Region.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for timeZoneRegion."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this timeZoneRegion resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "timeZoneName": {
                    "type": "string",
                    "description": "The name of the TimeZone."
                },
                "timeZoneCode": {
                    "type": "string",
                    "description": "A code that identifies the time zone."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the TimeZoneRegion is valid for."
                }
            }
        },
        "timeZoneRegion": {
            "title": "timeZoneRegion",
            "required": [
                "timeZoneName",
                "timeZone",
                "objectType"
            ],
            "description": "A national region where local clocks agree.",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "timeZoneRegion"
                    ],
                    "description": "The type of the object, timeZoneRegion."
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier for timeZoneRegion."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this timeZoneRegion resource."
                },
                "accuracy": {
                    "type": "string",
                    "description": "This attaribute allows us to determine when two points close to each other could be the same point (e.g. this GPS measurement is accurate to +- 20 meters)."
                },
                "timeZoneName": {
                    "type": "string",
                    "description": "The name of the TimeZone."
                },
                "timeZoneCode": {
                    "type": "string",
                    "description": "A code that identifies the time zone."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the TimeZoneRegion is valid for."
                },
                "timeZone": {
                    "$ref": "#/definitions/timeZone",
                    "description": "A time zone is any national region where local clocks agree."
                }
            }
        },
        "timeZoneRegionList": {
            "title": "timeZoneRegionList",
            "description": "This represents a list of timeZoneRegion resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the timeZoneRegion list."
                },
                "timeZoneRegions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/timeZoneRegion"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of timeZoneRegion."
                }
            }
        },
        "timeZoneRule": {
            "title": "timeZoneRule",
            "required": [
                "utcOffset"
            ],
            "description": "TimeZoneRules define an offset from UTC for a specific TimeZone.",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifier for timeZoneRule."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to this timeZoneRule resource."
                },
                "abbreviation": {
                    "type": "string",
                    "description": "An abbreviation for the TimeZoneRule."
                },
                "comment": {
                    "type": "string",
                    "description": "A comment that describes the TimeZoneRule."
                },
                "utcOffset": {
                    "type": "string",
                    "description": "A string that describes the UTC offset for the TimeZoneRule in the form of hh:mm. E.g. -6:00, +3:30, etc."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the TimeZoneRule is valid for."
                }
            }
        },
        "tokenizedPaymentCardPI": {
            "title": "tokenizedPaymentCardPI",
            "required": [
                "cardIssuer",
                "paymentCardToken",
                "cardLastFourDigits",
                "paymentCardType",
                "objectType"
            ],
            "description": "An Instrument for making payments via a tokenized payment card.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "tokenizedPaymentCardPI"
                    ],
                    "description": "The type of the object, tokenizedPaymentCardPI."
                },
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for tokenizedPaymentCardPI."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the tokenizedPaymentCardPI resource."
                },
                "name": {
                    "type": "string",
                    "description": "A user friendly name for the tokenizedPaymentCardPI."
                },
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form detail description of the tokenizedPaymentCardPI."
                },
                "cardIssuer": {
                    "type": "string",
                    "description": "The name of the card issuing organization."
                },
                "paymentCardToken": {
                    "type": "string",
                    "description": "Token number of the payment card."
                },
                "expirationMonth": {
                    "type": "string",
                    "description": "The expiration month of the payment card."
                },
                "expirationYear": {
                    "type": "string",
                    "description": "The expiration year of the payment card."
                },
                "cardLastFourDigits": {
                    "type": "string",
                    "description": "String containing the last 4 digits of the card number."
                },
                "paymentCardType": {
                    "$ref": "#/definitions/cardTypeEnum",
                    "description": "Type of the payment card."
                }
            }
        },
        "tokenizedPaymentCardPIList": {
            "title": "tokenizedPaymentCardPIList",
            "description": "This represents a list of Tokenized Payment Card PI resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Tokenized Payment Card PI list."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tokenizedPaymentCardPI"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Tokenized Payment Card PIs."
                }
            }
        },
        "tokenizedThirdPartyPI": {
            "title": "tokenizedThirdPartyPI",
            "required": [
                "thirdPartyId",
                "thirdPartyToken",
                "objectType"
            ],
            "description": "A payment instrument using third party payments via tokens.",
            "type": "object",
            "properties": {
                "objectType": {
                    "type": "string",
                    "enum": [
                        "tokenizedThirdPartyPI"
                    ],
                    "description": "The type of the object, tokenizedThirdPartyPI."
                },
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for tokenizedThirdPartyPI."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the tokenizedThirdPartyPI resource."
                },
                "name": {
                    "type": "string",
                    "description": "A user friendly name for the tokenizedThirdPartyPI."
                },
                "description": {
                    "type": "string",
                    "description": "This is a string, and defines a textual free-form detail description of the tokenizedThirdPartyPI."
                },
                "thirdPartyId": {
                    "type": "string",
                    "description": "An unique identifier for the third party."
                },
                "thirdPartyToken": {
                    "type": "string",
                    "description": "Token from third party."
                }
            }
        },
        "tokenizedThirdPartyPIList": {
            "title": "tokenizedThirdPartyPIList",
            "description": "This represents a list of Tokenized Third Party PI resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the Tokenized Third Party PI list."
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/tokenizedThirdPartyPI"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of Tokenized Third Party PIs."
                }
            }
        },
        "uri": {
            "title": "uri",
            "description": "A Universal Resource Identifier",
            "type": "object",
            "properties": {
                "scheme": {
                    "type": "string",
                    "description": "The URI scheme."
                },
                "schemeSpecificPart": {
                    "type": "string",
                    "description": "The URI scheme specific part."
                },
                "authority": {
                    "type": "string",
                    "description": "The URI authority."
                },
                "userInfo": {
                    "type": "string",
                    "description": "The URI user Info."
                },
                "host": {
                    "type": "string",
                    "description": "The URI host."
                },
                "port": {
                    "type": "string",
                    "description": "The URI resource port."
                },
                "path": {
                    "type": "string",
                    "description": "The URI resource path."
                },
                "query": {
                    "type": "string",
                    "description": "The URI query string"
                },
                "fragment": {
                    "type": "string",
                    "description": "The URI fragment."
                }
            }
        },
        "url": {
            "title": "url",
            "description": "A Universal Resource Identifier",
            "type": "object",
            "properties": {
                "fragment": {
                    "type": "string",
                    "description": "The URL fragment."
                },
                "host": {
                    "type": "string",
                    "description": "The URL host."
                },
                "path": {
                    "type": "string",
                    "description": "The URL resource path."
                },
                "port": {
                    "type": "string",
                    "description": "The URL resource port."
                },
                "protocol": {
                    "type": "string",
                    "description": "The URL resource protocol."
                },
                "query": {
                    "type": "string",
                    "description": "The URL query string"
                }
            }
        },
        "user-create-update": {
            "title": "user-create-update",
            "required": [
                "party"
            ],
            "description": "A representation of a User. This schema is used only for creating and updating a User.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for User."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the User resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the user in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the user is valid."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the User"
                }
            }
        },
        "user": {
            "title": "user",
            "required": [
                "party"
            ],
            "description": "Represents a User.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for User."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the User resource."
                },
                "party": {
                    "type": "object",
                    "description": "The part played by a party in a given context with any characteristics, such as expected pattern of behavior, attributes, or associations that it entails.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "description": "A means by which communication may be established with a party (individual or organization). Contact Medium is an abstract concept that should be subclassed as required.",
                    "minItems": 1,
                    "uniqueItems": true
                },
                "name": {
                    "type": "string",
                    "description": "An optional attribute used to define a specific name of the user in order to provide further context for the role (e.g., Williams Household)."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the user is valid."
                },
                "status": {
                    "type": "string",
                    "description": "Status of the User"
                },
                "customerAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userAccountAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The collection of a User to a Customer Account assignments."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/preference"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of preference in the context of User."
                },
                "userCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userCredential"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of userCredential for User."
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genericPhysicalDevice"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The collection of physical devices associated to User."
                },
                "entitlements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entitlement"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "A collection of EntitlementToken that authorized the Entitlement of the User."
                }
            }
        },
        "userAccountAssignment": {
            "title": "userAccountAssignment",
            "required": [
                "userRoleType",
                "customerAccount"
            ],
            "description": "Represents a User.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique ID for userAccountAssignment."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the User Account assignment resource."
                },
                "userRoleType": {
                    "type": "string",
                    "enum": [
                        "Primary Owner",
                        "Unrestricted Secondary",
                        "Restricted Secondary",
                        "Non Authorized Secondary",
                        "Delegate"
                    ],
                    "description": "The type of User role for this assignment."
                },
                "customerAccount": {
                    "$ref": "#/definitions/customerAccountSummary",
                    "description": "An entity that defines the properties of a CustomerAccount."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the user assignment is applicable."
                }
            }
        },
        "userCredential": {
            "title": "userCredential",
            "required": [
                "userId"
            ],
            "description": "A combination of user ID and password that is used to authenticate a user for access to provider services or account management.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "The unique identifier for the user credential."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the userCredential resource."
                },
                "userId": {
                    "type": "string",
                    "description": "Sometimes referred to as a username, this is the identifier that is used in combination with a password to authenticate a user for access to provider services or account management."
                },
                "userAccountController": {
                    "type": "string",
                    "description": "Identifies the system (or controller) responsible for processing the user authentication."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period for which the credential is valid."
                },
                "adminStatus": {
                    "$ref": "#/definitions/customerAccountStatusEnum",
                    "description": "Specifies the current administrative status of an account (e.g., Active, Suspended)."
                },
                "userCredentialCategory": {
                    "type": "string",
                    "description": "Specifies the type of credential as the login account could be for a web portal, an application, an Operating System, etc. Suggested values: APPLICATION, OPERATINGSYSTEM, UMS-L, UMS-C, WEBPORTAL. By default all accounts are deemed to be APPLICATION."
                },
                "usageType": {
                    "$ref": "#/definitions/credentialUsageEnum",
                    "description": "Specifies whether the credential is shared (i.e., multiple users use the credential to access a target) or individual (assigned to a single user)."
                }
            }
        },
        "userCredentialList": {
            "title": "userCredentialList",
            "description": "This represents a list of userCredential resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the userCredential list."
                },
                "userCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userCredential"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of userCredential."
                }
            }
        },
        "userCustomerAccount": {
            "title": "userCustomerAccount",
            "required": [
                "userProfile"
            ],
            "description": "The Customer Accounts associated with a User.",
            "type": "object",
            "properties": {
                "userProfile": {
                    "$ref": "#/definitions/userProfile",
                    "description": "A summary view of an User resource."
                },
                "customerAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/userAccountAssignment"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The collection of User to a Customer Account assignments."
                }
            }
        },
        "userList": {
            "title": "userList",
            "description": "This represents a list of user resources.",
            "type": "object",
            "properties": {
                "available": {
                    "type": "number",
                    "description": "The number of items available for this list."
                },
                "returned": {
                    "type": "number",
                    "description": "The number of items returned for this list."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the user list."
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "An array of user."
                }
            }
        },
        "userPreferences": {
            "title": "userPreferences",
            "required": [
                "userProfile"
            ],
            "description": "The Preferences associated with a User.",
            "type": "object",
            "properties": {
                "userProfile": {
                    "$ref": "#/definitions/userProfile",
                    "description": "A summary view of an User resource."
                },
                "preferences": {
                    "type": "array",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/preference"
                            },
                            {
                                "$ref": "#/definitions/preferenceSet"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "The collection of preferences."
                }
            }
        },
        "userProfile": {
            "title": "userProfile",
            "required": [
                "userId",
                "partyProfile"
            ],
            "description": "A summary view of an User resource",
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string",
                    "description": "Sometimes referred to as a username, this is the identifier that is used in combination with a password to authenticate a user for access to provider services or account management."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the full User resource."
                },
                "partyRoleId": {
                    "type": "string",
                    "description": "The unique identifier for this User Party Role."
                },
                "partyProfile": {
                    "type": "object",
                    "description": "Information about the individual or organization playing the Customer role.",
                    "oneOf": [
                        {
                            "$ref": "#/definitions/individualSummary"
                        },
                        {
                            "$ref": "#/definitions/organizationSummary"
                        }
                    ]
                },
                "contactMediums": {
                    "type": "array",
                    "description": "Contact mediums for the Customer.",
                    "items": {
                        "oneOf": [
                            {
                                "$ref": "#/definitions/postalContact"
                            },
                            {
                                "$ref": "#/definitions/emailContact"
                            },
                            {
                                "$ref": "#/definitions/faxContact"
                            },
                            {
                                "$ref": "#/definitions/phoneContact"
                            }
                        ]
                    },
                    "minItems": 1,
                    "uniqueItems": true
                },
                "status": {
                    "type": "string",
                    "description": "Status of the user."
                },
                "validFor": {
                    "$ref": "#/definitions/timePeriod",
                    "description": "The time period that the user is valid for."
                }
            }
        },
        "userRef": {
            "title": "userRef",
            "required": [
                "id",
                "link"
            ],
            "description": "A group assigned to a BusinessInteraction. For example, an IncidentTicket assigned to a particular organization (e.g., Network Services).",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for userRef."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the user resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user."
                },
                "primaryUserId": {
                    "type": "string",
                    "description": "Some form of identification for the user."
                }
            }
        },
        "userTempRef": {
            "title": "userTempRef",
            "required": [
                "id",
                "link"
            ],
            "description": "A group assigned to a BusinessInteraction. For example, an IncidentTicket assigned to a particular organization (e.g., Network Services).",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "An unique idetifier for userRef."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A link to the user resource."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user."
                },
                "primaryUserId": {
                    "type": "string",
                    "description": "Some form of identification for the user."
                }
            }
        },
        "workLogEntry": {
            "title": "workLogEntry",
            "required": [
                "worklogEntryDate",
                "worklogEntryDetail"
            ],
            "description": "A specific entry in the work activity for an Interaction.",
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "A unique idetifier for a workLogEntry."
                },
                "link": {
                    "$ref": "#/definitions/link",
                    "description": "A self referencing link to the workLogEntry resource."
                },
                "worklogEntryDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and time of work activity performed on an interaction."
                },
                "worklogEntryDetail": {
                    "type": "string",
                    "description": "Detailed description of work activity performed on an interaction."
                }
            }
        }
    }
}
